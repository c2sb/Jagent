/* The following code was generated by JFlex 1.4.3 on 2/14/10 10:42 PM */

package rebound.jagent.lib.caos.lexer;

import static rebound.jagent.lib.caos.lexer.TokenType.*;

import java.io.IOException;
import java.io.Reader;
import rebound.exceptions.ImpossibleException;
import rebound.exceptions.SyntaxCheckedException.TextSyntaxCheckedException;

@SuppressWarnings("all")
/**
 * A Lexical Analyzer for CAOS script.
 */
public class CAOSLexer
{
	
	/** This character denotes the end of file */
	private static final int YYEOF = -1;
	
	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;
	
	/** lexical states */
	private static final int STRING = 2;
	private static final int YYINITIAL = 0;
	
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };
	
	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\1\1\17\2\22\1\21\22\0\1\1\1\65\1\12\1\64" + "\1\0\1\5\1\0\1\23\2\0\1\20\1\62\1\0\1\4\1\2" + "\1\0\1\6\1\55\1\56\7\3\1\57\1\0\1\37\1\36\1\40" + "\2\0\1\25\1\32\1\45\1\44\1\41\1\50\1\33\1\51\1\47" + "\1\61\1\60\1\43\1\27\1\14\1\26\1\46\1\42\1\15\1\30" + "\1\16\1\31\1\24\1\53\1\52\1\54\1\63\1\34\1\13\1\35" + "\1\0\1\10\1\0\1\25\1\32\1\45\1\44\1\41\1\50\1\33" + "\1\51\1\47\1\61\1\60\1\43\1\27\1\14\1\26\1\46\1\42" + "\1\15\1\30\1\16\1\31\1\24\1\53\1\52\1\54\1\63\12\0" + "\1\22\44\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0" + "\37\7\1\0\u013f\7\31\0\162\7\4\0\14\7\16\0\5\7\11\0" + "\1\7\213\0\1\7\13\0\1\7\1\0\3\7\1\0\1\7\1\0" + "\24\7\1\0\54\7\1\0\46\7\1\0\5\7\4\0\202\7\10\0" + "\105\7\1\0\46\7\2\0\2\7\6\0\20\7\41\0\46\7\2\0" + "\1\7\7\0\47\7\110\0\33\7\5\0\3\7\56\0\32\7\5\0" + "\13\7\25\0\12\11\4\0\2\7\1\0\143\7\1\0\1\7\17\0" + "\2\7\7\0\2\7\12\11\3\7\2\0\1\7\20\0\1\7\1\0" + "\36\7\35\0\3\7\60\0\46\7\13\0\1\7\u0152\0\66\7\3\0" + "\1\7\22\0\1\7\7\0\12\7\4\0\12\11\25\0\10\7\2\0" + "\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0" + "\1\7\36\0\2\7\1\0\3\7\4\0\12\11\2\7\23\0\6\7" + "\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7" + "\1\0\2\7\37\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7" + "\20\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7" + "\1\0\5\7\3\0\1\7\22\0\1\7\17\0\2\7\4\0\12\11" + "\25\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7" + "\1\0\5\7\3\0\1\7\36\0\2\7\1\0\3\7\4\0\12\11" + "\1\0\1\7\21\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7" + "\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7" + "\3\0\10\7\1\0\3\7\55\0\11\11\25\0\10\7\1\0\3\7" + "\1\0\27\7\1\0\12\7\1\0\5\7\46\0\2\7\4\0\12\11" + "\25\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7" + "\3\0\1\7\40\0\1\7\1\0\2\7\4\0\12\11\25\0\10\7" + "\1\0\3\7\1\0\27\7\1\0\20\7\46\0\2\7\4\0\12\11" + "\25\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7" + "\72\0\60\7\1\0\2\7\14\0\7\7\11\0\12\11\47\0\2\7" + "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7" + "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7" + "\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7" + "\11\0\12\11\2\0\2\7\42\0\1\7\37\0\12\11\26\0\10\7" + "\1\0\42\7\35\0\4\7\164\0\42\7\1\0\5\7\1\0\2\7" + "\25\0\12\11\6\0\6\7\112\0\46\7\12\0\51\7\7\0\132\7" + "\5\0\104\7\5\0\122\7\6\0\7\7\1\0\77\7\1\0\1\7" + "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\47\7" + "\1\0\1\7\1\0\4\7\2\0\37\7\1\0\1\7\1\0\4\7" + "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\7\7" + "\1\0\27\7\1\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7" + "\1\0\47\7\1\0\23\7\16\0\11\11\56\0\125\7\14\0\u026c\7" + "\2\0\10\7\12\0\32\7\5\0\113\7\25\0\15\7\1\0\4\7" + "\16\0\22\7\16\0\22\7\16\0\15\7\1\0\3\7\17\0\64\7" + "\43\0\1\7\4\0\1\7\3\0\12\11\46\0\12\11\6\0\130\7" + "\10\0\51\7\127\0\35\7\51\0\12\11\36\7\2\0\5\7\u038b\0" + "\154\7\224\0\234\7\4\0\132\7\6\0\26\7\2\0\6\7\2\0" + "\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0" + "\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0" + "\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0" + "\3\7\1\0\7\7\53\0\2\22\107\0\1\7\15\0\1\7\202\0" + "\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0" + "\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7\1\0" + "\7\7\3\0\3\7\5\0\5\7\u0ebb\0\2\7\52\0\5\7\5\0" + "\2\7\4\0\126\7\6\0\3\7\1\0\132\7\1\0\4\7\5\0" + "\50\7\4\0\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0" + "\u51a6\7\132\0\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0" + "\7\7\14\0\5\7\5\0\1\7\1\0\12\7\1\0\15\7\1\0" + "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0" + "\u016b\7\22\0\100\7\2\0\66\7\50\0\14\7\164\0\5\7\1\0" + "\207\7\23\0\12\11\7\0\32\7\6\0\32\7\13\0\131\7\3\0" + "\6\7\2\0\6\7\2\0\6\7\2\0\3\7\43\0";
	
	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
	
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	
	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\2\3\1\4\1\1\1\5\15\1" + "\1\6\1\7\1\10\1\11\1\12\16\1\1\13\1\14" + "\1\15\1\4\7\0\1\16\31\0\3\17\23\0\1\20" + "\56\0\1\12\4\0\1\21\2\0\1\22\1\16\1\21" + "\14\0\1\11\1\0\1\22\100\0\1\23\1\24\1\25" + "\1\26\1\27\1\4\70\0\1\30\1\31\14\0\1\32" + "\uu0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\2\0" + "\1\u0106\1\0\1\u0107\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c" + "\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u0113\1\u0114" + "\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c" + "\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123\1\u0124" + "\1\u0125\1\u0126\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c" + "\1\u012d\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134" + "\1\u0135\1\0\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b" + "\1\u013c\1\u013d\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143" + "\1\u0144\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b" + "\1\u014c\1\u014d\1\u014e\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153" + "\1\u0154\1\u0155\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b" + "\1\u015c\1\u015d\1\u015e\1\u015f\1\u0160\1\u0161\1\u0162\1\u0163" + "\1\u0164\1\u0165\1\u0166\1\u0167\1\u0168\1\u0169\1\u016a\1\u016b" + "\2\0\1\u016c\1\u016d\1\u016e\1\0\1\u016f\1\u0170\1\u0171" + "\1\u0172\1\u0173\1\u0174\1\u0175\1\u0176\1\u0177\1\u0178\1\u0179" + "\1\u017a\1\u017b\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\1\u0181" + "\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u0187\1\u0188\1\u0189" + "\1\u018a\1\u018b\1\u018c\1\u018d\1\u018e\1\u018f\1\u0190\1\u0191" + "\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197\1\u0198\1\u0199" + "\1\u019a\1\u019b\1\u019c\1\u019d\1\u019e\1\u019f\1\u01a0\1\0" + "\1\u01a1\1\u01a2\1\u01a3\1\u01a4\1\u01a5\1\u01a6\1\u01a7\1\u01a8" + "\1\u01a9\1\0\1\u01aa\1\u01ab\1\u01ac\1\u01ad\1\u01ae\1\u01af" + "\1\u01b0\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1\u01b6\1\u01b7" + "\1\u01b8\1\u01b9\1\u01ba\1\u01bb\1\u01bc\1\u01bd\1\u01be\1\u01bf" + "\1\u01c0\1\u01c1\1\u01c2\1\u01c3\1\u01c4\1\u01c5\1\u01c6\1\4" + "\23\0\1\4\31\0\1\u01c7\10\0\1\u01c8\101\0\1\4" + "\211\0\1\4\216\0\1\4\1\u01c9\1\u01ca\1\u01cb\1\u01cc" + "\1\u01cd\1\u01ce\1\u01cf\1\u01d0\1\u01d1\1\u01d2\1\u01d3\1\u01d4" + "\1\u01d5\1\u01d6\1\u01d7\1\u01d8\1\u01d9\1\u01da\1\u01db\1\u01dc" + "\1\u01dd\1\u01de\1\u01df\1\u01e0\1\u01e1\1\u01e2\1\u01e3\1\u01e4" + "\1\u01e5\1\u01e6\1\u01e7\1\u01e8\1\u01e9\1\u01ea\1\u01eb\1\u01ec" + "\1\u01ed\1\u01ee\1\u01ef\1\u01f0\1\u01f1\1\u01f2\1\u01f3\1\u01f4" + "\1\u01f5\1\u01f6\1\u01f7\1\u01f8\1\u01f9\1\u01fa\1\u01fb\1\u01fc" + "\1\u01fd\1\u01fe\1\u01ff\1\u0200\1\u0201\1\u0202\1\u0203\1\u0204" + "\1\u0205\1\u0206\1\u0207\1\u0208\1\u0209\1\u020a\1\u020b\1\u020c" + "\1\u020d\1\u020e\1\u020f\1\u0210\1\u0211\1\u0212\1\u0213\1\u0214" + "\1\u0215\1\u0216\1\u0217\1\u0218\1\u0219\1\u021a\1\u021b\1\u021c" + "\1\u021d\1\u021e\1\u021f\1\u0220\1\u0221\1\u0222\1\u0223\1\u0224" + "\1\u0225\1\u0226\1\u0227\1\u0228\1\u0229\1\u022a\1\u022b\1\u022c" + "\1\u022d\1\u022e\1\u022f\1\u0230\1\u0231\1\u0232\1\u0233\1\u0234" + "\1\u0235\1\u0236\1\u0237\1\u0238\1\u0239\1\u023a\1\u023b\1\u023c" + "\1\u023d\1\u023e\1\u023f\1\u0240\1\u0241\1\u0242\1\u0243\1\u0244" + "\1\u0245\1\u0246\1\u0247\1\u0248\1\u0249\1\u024a\1\u024b\1\u024c" + "\1\u024d\1\u024e\1\u024f\1\u0250\1\u0251\1\u0252\1\u0253\1\u0254" + "\1\u0255\1\u0256\1\u0257\1\u0258\1\u0259\1\u025a\1\u025b\1\u025c" + "\1\u025d\1\u025e\1\u025f\1\u0260\1\u0261\1\u0262\1\u0263\1\u0264" + "\1\u0265\1\u0266\27\4";
	
	private static int[] zzUnpackAction()
	{
		int[] result = new int[1618];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}
	
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	
	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a" + "\0\154\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4" + "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\154\0\154" + "\0\154\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2" + "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762" + "\0\u0798\0\u07ce\0\154\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc" + "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c" + "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c" + "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec" + "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0252\0\154\0\u0f30" + "\0\u0252\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa" + "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a" + "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a" + "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba" + "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a" + "\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a" + "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca" + "\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a" + "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a" + "\0\u1e60\0\u1e96\0\u1ecc\0\154\0\154\0\154\0\u1f02\0\u1f38" + "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8" + "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298" + "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448" + "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8" + "\0\u262e\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8" + "\0\u27de\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958" + "\0\u298e\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08" + "\0\u2b3e\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8" + "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68" + "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\154\0\154\0\154" + "\0\154\0\154\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba" + "\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a" + "\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a" + "\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca" + "\0\u3600\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a" + "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a" + "\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada" + "\0\u3b10\0\u3b46\0\u3b7c\0\154\0\154\0\u3bb2\0\u3be8\0\u3c1e" + "\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce" + "\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e" + "\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e" + "\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de" + "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e" + "\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e" + "\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee" + "\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e" + "\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e" + "\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe" + "\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae" + "\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e" + "\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e" + "\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be" + "\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538\0\u556e" + "\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e" + "\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce" + "\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48\0\u5a7e" + "\0\u5ab4\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8\0\u5c2e" + "\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72\0\u5da8\0\u5dde" + "\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58\0\u5f8e" + "\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108\0\u613e" + "\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee" + "\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e" + "\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e" + "\0\u6684\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe" + "\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae" + "\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u6b5e" + "\0\u6b94\0\u6bca\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e" + "\0\u6d44\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe" + "\0\u6ef4\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e" + "\0\u70a4\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e" + "\0\u7254\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce" + "\0\u7404\0\u743a\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e" + "\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e" + "\0\u7764\0\u779a\0\u77d0\0\154\0\u7806\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\u783c" + "\0\154\0\154\0\154\0\uu78a8\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\u78de" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\u7914\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\u794a\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\u7980\0\154\0\154\0\154\0\154" + "\0\u79b6\0\154\0\154\0\154\0\154\0\154\0\u79ec\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\u7a22\0\u7a58\0\154\0\u7a8e\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\u7ac4\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\u7afa\0\u7b30\0\154\0\154\0\154\0\u7b66" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\u7b9c\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\u7bd2\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\u7c08\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u7d16" + "\0\u7d4c\0\u7d82\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6" + "\0\u7efc\0\u7f32\0\u7f68\0\u7f9e\0\u7fd4\0\u800a\0\u8040\0\u8076" + "\0\u80ac\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0\0\u8226" + "\0\u825c\0\u8292\0\u82c8\0\u82fe\0\u8334\0\u836a\0\u83a0\0\u83d6" + "\0\u840c\0\u8442\0\u8478\0\u84ae\0\u84e4\0\u851a\0\u8550\0\u8586" + "\0\u85bc\0\u85f2\0\u8628\0\u865e\0\u8694\0\u86ca\0\u8700\0\u8736" + "\0\u876c\0\u87a2\0\u87d8\0\u880e\0\u8844\0\u887a\0\u88b0\0\u88e6" + "\0\u891c\0\u8952\0\u8988\0\u89be\0\u89f4\0\u8a2a\0\u8a60\0\u8a96" + "\0\u8acc\0\u8b02\0\u8b38\0\u8b6e\0\u8ba4\0\u8bda\0\u8c10\0\u8c46" + "\0\u8c7c\0\u8cb2\0\u8ce8\0\u8d1e\0\u8d54\0\u8d8a\0\u8dc0\0\u8df6" + "\0\u8e2c\0\u8e62\0\u8e98\0\u8ece\0\u8f04\0\u8f3a\0\u8f70\0\u8fa6" + "\0\u8fdc\0\u9012\0\u9048\0\u907e\0\u90b4\0\u90ea\0\u9120\0\u9156" + "\0\u918c\0\u91c2\0\u91f8\0\u922e\0\u9264\0\u929a\0\u92d0\0\u9306" + "\0\u933c\0\u9372\0\u93a8\0\u93de\0\u9414\0\u944a\0\u9480\0\u94b6" + "\0\u94ec\0\u9522\0\u9558\0\u958e\0\u95c4\0\u95fa\0\u9630\0\u9666" + "\0\u969c\0\u96d2\0\u9708\0\u973e\0\u9774\0\u97aa\0\u97e0\0\u9816" + "\0\u984c\0\u9882\0\u98b8\0\u98ee\0\u9924\0\u995a\0\u9990\0\u99c6" + "\0\u99fc\0\u9a32\0\u9a68\0\u9a9e\0\u9ad4\0\u9b0a\0\u9b40\0\u9b76" + "\0\u9bac\0\u9be2\0\u9c18\0\u9c4e\0\u9c84\0\u9cba\0\u9cf0\0\u9d26" + "\0\u9d5c\0\u9d92\0\u9dc8\0\u9dfe\0\u9e34\0\u9e6a\0\u9ea0\0\u9ed6" + "\0\u9f0c\0\u9f42\0\u9f78\0\u9fae\0\u9fe4\0\ua01a\0\ua050\0\ua086" + "\0\ua0bc\0\ua0f2\0\ua128\0\ua15e\0\ua194\0\ua1ca\0\ua200\0\ua236" + "\0\ua26c\0\ua2a2\0\ua2d8\0\ua30e\0\ua344\0\ua37a\0\ua3b0\0\ua3e6" + "\0\ua41c\0\ua452\0\ua488\0\ua4be\0\ua4f4\0\ua52a\0\ua560\0\ua596" + "\0\ua5cc\0\ua602\0\ua638\0\ua66e\0\ua6a4\0\ua6da\0\ua710\0\ua746" + "\0\ua77c\0\ua7b2\0\ua7e8\0\ua81e\0\ua854\0\ua88a\0\ua8c0\0\ua8f6" + "\0\ua92c\0\ua962\0\ua998\0\ua9ce\0\uaa04\0\uaa3a\0\uaa70\0\uaaa6"
		+ "\0\uaadc\0\uab12\0\uab48\0\uab7e\0\uabb4\0\uabea\0\uac20\0\uac56" + "\0\uac8c\0\uacc2\0\uacf8\0\uad2e\0\uad64\0\uad9a\0\uadd0\0\uae06" + "\0\uae3c\0\uae72\0\uaea8\0\uaede\0\uaf14\0\uaf4a\0\uaf80\0\uafb6" + "\0\uafec\0\ub022\0\ub058\0\ub08e\0\ub0c4\0\ub0fa\0\ub130\0\ub166" + "\0\ub19c\0\ub1d2\0\ub208\0\ub23e\0\ub274\0\ub2aa\0\ub2e0\0\ub316" + "\0\ub34c\0\ub382\0\ub3b8\0\ub3ee\0\ub424\0\ub45a\0\ub490\0\ub4c6" + "\0\ub4fc\0\ub532\0\ub568\0\ub59e\0\ub5d4\0\ub60a\0\ub640\0\ub676" + "\0\ub6ac\0\ub6e2\0\ub718\0\ub74e\0\ub784\0\ub7ba\0\ub7f0\0\ub826" + "\0\ub85c\0\ub892\0\ub8c8\0\ub8fe\0\ub934\0\ub96a\0\ub9a0\0\ub9d6" + "\0\uba0c\0\uba42\0\uba78\0\ubaae\0\ubae4\0\ubb1a\0\ubb50\0\ubb86" + "\0\ubbbc\0\ubbf2\0\ubc28\0\ubc5e\0\ubc94\0\ubcca\0\ubd00\0\ubd36" + "\0\ubd6c\0\ubda2\0\ubdd8\0\ube0e\0\ube44\0\ube7a\0\ubeb0\0\ubee6" + "\0\ubf1c\0\ubf52\0\ubf88\0\ubfbe\0\ubff4\0\uc02a\0\uc060\0\uc096" + "\0\uc0cc\0\uc102\0\uc138\0\uc16e\0\uc1a4\0\uc1da\0\uc210\0\uc246" + "\0\uc27c\0\uc2b2\0\uc2e8\0\uc31e\0\uc354\0\uc38a\0\uc3c0\0\uc3f6" + "\0\uc42c\0\uc462\0\uc498\0\uc4ce\0\uc504\0\uc53a\0\uc570\0\uc5a6" + "\0\uc5dc\0\uc612\0\uc648\0\uc67e\0\uc6b4\0\uc6ea\0\uc720\0\uc756" + "\0\uc78c\0\uc7c2\0\uc7f8\0\uc82e\0\uc864\0\uc89a\0\uc8d0\0\uc906" + "\0\uc93c\0\uc972\0\uc9a8\0\uc9de\0\uca14\0\uca4a\0\uca80\0\ucab6" + "\0\ucaec\0\ucb22\0\ucb58\0\ucb8e\0\ucbc4\0\ucbfa\0\ucc30\0\ucc66" + "\0\ucc9c\0\uccd2\0\ucd08\0\ucd3e\0\ucd74\0\ucdaa\0\ucde0\0\uce16" + "\0\uce4c\0\uce82\0\uceb8\0\uceee\0\ucf24\0\ucf5a\0\ucf90\0\ucfc6" + "\0\ucffc\0\ud032\0\ud068\0\ud09e\0\ud0d4\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" + "\0\154\0\154\0\154\0\ud10a\0\ud140\0\ud176\0\ud1ac\0\ud1e2" + "\0\ud218\0\ud24e\0\ud284\0\ud2ba\0\ud2f0\0\ud326\0\ud35c\0\ud392" + "\0\ud3c8\0\ud3fe\0\ud434\0\ud46a\0\ud4a0\0\ud4d6\0\ud50c\0\ud542" + "\0\ud578\0\154";
	
	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[1618];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}
	
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();
	
	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\1\5\2\6\1\7\1\6\1\3\1\10" + "\1\3\1\11\1\3\1\12\1\13\1\14\1\4\1\15" + "\1\4\1\3\1\16\1\17\1\20\1\21\1\22\1\23" + "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" + "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43" + "\1\44\1\3\1\45\1\46\2\6\1\3\1\47\1\50" + "\1\3\1\51\2\3\12\52\1\53\1\54\52\52\67\0" + "\1\4\15\0\1\4\1\0\1\4\47\0\1\5\2\0" + "\1\5\46\0\2\5\11\0\1\5\1\6\2\0\1\6" + "\46\0\2\6\15\0\1\55\46\0\1\55\41\0\1\56" + "\13\0\1\57\1\60\1\61\43\0\1\62\1\63\2\0" + "\1\64\7\0\1\65\3\0\1\66\1\67\4\0\1\70" + "\26\0\1\71\1\0\1\72\6\0\1\73\1\74\1\75" + "\1\76\2\0\1\77\5\0\1\100\1\0\1\101\1\0" + "\1\102\1\103\33\0\1\104\1\105\1\106\6\0\1\107" + "\1\110\1\111\15\0\1\112\1\0\1\113\3\0\1\114" + "\1\115\11\0\17\116\1\117\1\116\1\120\1\121\43\116" + "\13\122\1\123\7\122\1\0\42\122\16\0\1\124\6\0" + "\1\125\1\126\1\127\11\0\1\130\5\0\1\131\32\0" + "\1\132\1\0\1\133\5\0\1\134\3\0\1\135\1\0" + "\1\136\1\137\5\0\1\140\1\0\1\141\1\142\1\143" + "\1\144\34\0\1\145\6\0\1\146\1\0\1\147\2\0" + "\1\150\1\151\20\0\1\152\30\0\1\153\5\0\1\154" + "\1\155\1\156\1\157\1\160\1\161\7\0\1\162\1\0" + "\1\163\1\0\1\164\1\0\1\165\32\0\1\166\1\0" + "\1\167\5\0\1\170\1\171\1\172\2\0\1\173\7\0" + "\1\174\1\175\1\176\1\177\1\200\1\201\1\202\1\0" + "\1\203\1\0\1\204\26\0\1\205\1\206\27\0\1\207" + "\1\210\1\0\1\211\32\0\1\212\6\0\1\213\1\214" + "\1\215\2\0\1\216\17\0\1\217\2\0\1\220\3\0" + "\1\221\21\0\1\222\1\223\1\224\6\0\1\225\1\226" + "\1\227\1\230\10\0\1\231\4\0\1\232\1\233\54\0" + "\1\234\1\0\1\235\63\0\1\236\43\0\1\237\1\240" + "\1\241\5\0\1\242\1\243\1\0\1\244\1\245\11\0" + "\1\31\1\246\1\0\1\247\1\250\3\0\1\251\44\0" + "\1\252\52\0\1\253\7\0\1\254\12\0\1\255\5\0" + "\1\256\33\0\1\257\7\0\1\260\1\261\1\262\1\263" + "\1\0\1\264\6\0\1\265\3\0\1\266\1\267\1\270" + "\1\271\32\0\1\272\7\0\1\273\1\274\1\275\13\0" + "\1\276\5\0\1\277\30\0\1\300\1\301\1\302\6\0" + "\1\303\1\304\1\0\1\305\1\306\7\0\1\307\1\0" + "\1\310\1\0\1\311\34\0\1\312\1\0\1\313\10\0" + "\1\314\1\315\16\0\1\316\33\0\1\317\1\320\5\0" + "\1\321\1\322\1\323\1\324\13\0\1\325\1\326\1\327" + "\1\0\1\330\43\0\1\331\1\332\4\0\1\333\5\0" + "\1\334\5\0\1\335\1\0\1\336\30\0\1\337\1\340" + "\1\341\6\0\1\342\1\343\2\0\1\344\7\0\1\345" + "\2\0\1\346\1\0\1\347\1\350\57\0\1\351\65\0" + "\1\352\5\0\1\353\57\0\1\354\52\0\1\355\37\0" + "\12\52\2\0\52\52\12\0\1\356\1\357\1\360\1\361" + "\1\362\55\0\1\363\46\0\1\363\56\0\1\364\63\0" + "\1\365\76\0\1\366\1\367\25\0\1\370\76\0\1\371" + "\53\0\1\372\1\373\32\0\1\374\57\0\1\375\1\376" + "\37\0\1\377\14\0\1\u0100\16\0\1\u0101\1\u0102\55\0" + "\1\u0103\55\0\1\u0104\75\0\1\u0105\55\0\1\u0106\57\0" + "\1\u0107\21\0\1\u0108\4\0\1\u0109\25\0\1\u010a\1\0" + "\1\u010b\26\0\1\u010c\36\0\1\u010d\7\0\1\u010e\67\0" + "\1\u010f\102\0\1\u0110\45\0\1\u0111\23\0\1\u0112\32\0" + "\1\u0113\6\0\1\u0114\15\0\1\u0115\2\0\1\u0116\45\0" + "\1\u0117\102\0\1\u0118\47\0\1\u0119\56\0\1\u011a\74\0" + "\1\u011b\17\0\1\u011c\45\0\1\u011d\54\0\1\u011e\1\u011f" + "\15\0\1\u0120\11\0\1\u0121\35\0\1\u0122\1\u0123\12\0" + "\1\u0124\60\0\1\u0125\67\0\1\u0126\53\0\1\u0127\12\0" + "\1\u0128\15\0\1\u0129\67\0\1\u012a\64\0\1\u012b\36\0" + "\1\u012c\71\0\1\u012d\42\0\17\122\1\0\46\122\26\0" + "\1\u012e\42\0\1\u012f\2\0\1\u012f\2\0\1\u012f\3\0" + "\1\u0130\37\0\2\u012f\52\0\1\u0131\1\0\1\u0132\1\0" + "\1\u0133\32\0\1\u0134\44\0\1\u0135\47\0\1\u0136\52\0" + "\1\u0137\64\0\1\u0138\3\0\1\u0139\10\0\1\u013a\2\0" + "\1\u013b\34\0\1\u013c\6\0\1\u013d\65\0\1\u013e\13\0" + "\1\u013f\67\0\1\u0140\3\0\1\u0141\46\0\1\u0142\1\0" + "\1\u0143\47\0\1\u0144\24\0\1\u0145\41\0\1\u0146\66\0" + "\1\u0147\27\0\1\u0148\46\0\1\u0149\14\0\1\u014a\2\0" + "\1\u014b\44\0\1\u014c\16\0\1\u014d\35\0\1\u014e\30\0" + "\1\u014f\34\0\1\u0150\15\0\1\u0151\10\0\1\u0152\24\0" + "\1\u0153\2\0\1\u0153\2\0\1\u0153\27\0\1\u0154\13\0" + "\2\u0153\62\0\1\u0155\30\0\1\u0156\77\0\1\u0157\51\0" + "\1\u0158\77\0\1\u0159\22\0\1\u015a\17\0\1\u015b\2\0" + "\1\u015b\2\0\1\u015b\4\0\1\u015c\11\0\1\u015d\1\0" + "\1\u015e\15\0\1\u015f\4\0\2\u015b\23\0\1\u0160\1\0" + "\1\u0161\10\0\1\u0162\16\0\1\u0163\33\0\1\u0164\1\0" + "\1\u0165\5\0\1\u0166\4\0\1\u0167\12\0\1\u0168\1\0" + "\1\u0169\4\0\1\u016a\42\0\1\u016b\76\0\1\u016c\42\0" + "\1\u016d\24\0\1\u016e\40\0\1\u016f\10\0\1\u0170\1\u0171" + "\63\0\1\u0172\102\0\1\u0173\36\0\1\u0174\1\u0175\26\0" + "\1\u0176\46\0\1\u0177\16\0\1\u0178\36\0\1\u0179\7\0" + "\1\u017a\1\u017b\12\0\1\u017c\4\0\1\u017d\1\u017e\57\0" + "\1\u017f\50\0\1\u0180\27\0\1\u0181\26\0\1\u0182\13\0" + "\1\u0183\66\0\1\u0184\51\0\1\u0185\6\0\1\u0186\13\0" + "\1\u0187\21\0\1\u0188\17\0\1\u0189\76\0\1\u018a\66\0" + "\1\u018b\53\0\1\u018c\7\0\1\u018d\1\u018e\53\0\1\u018f" + "\10\0\1\u0190\17\0\1\u0191\1\0\1\u0192\32\0\1\u0193" + "\77\0\1\u0194\64\0\1\u0195\56\0\1\u0196\24\0\1\u0197" + "\1\0\1\u0198\1\0\1\u0199\51\0\1\u019a\75\0\1\u019b" + "\70\0\1\u019c\35\0\1\u019d\7\0\1\u019e\53\0\1\u019f" + "\12\0\1\u01a0\63\0\1\u01a1\54\0\1\u01a2\13\0\1\u01a3" + "\52\0\1\u01a4\10\0\1\u01a5\15\0\1\u01a6\104\0\1\u01a7" + "\26\0\1\u01a8\110\0\1\u01a9\51\0\1\u01aa\10\0\1\u01ab" + "\46\0\1\u01ac\3\0\1\u01ad\61\0\1\u01ae\20\0\1\u01af" + "\1\u01b0\44\0\1\u01b1\66\0\1\u01b2\13\0\1\u01b3\3\0" + "\1\u01b4\34\0\1\u01b5\74\0\1\u01b6\71\0\1\u01b7\50\0" + "\1\u01b8\76\0\1\u01b9\104\0\1\u01ba\52\0\1\u01bb\12\0" + "\1\u01bc\70\0\1\u01bd\63\0\1\u01be\1\0\1\u01bf\57\0" + "\1\u01c0\53\0\1\u01c1\105\0\1\u01c2\57\0\1\u01c3\51\0" + "\1\u01c4\2\0\1\u01c5\16\0\1\u01c6\44\0\1\u01c7\64\0" + "\1\u01c8\106\0\1\u01c9\66\0\1\u01ca\63\0\1\u01cb\35\0" + "\1\u01cc\7\0\1\u01cd\1\u01ce\16\0\1\u01cf\2\0\1\u01d0" + "\2\0\1\u01d1\62\0\1\u01d2\31\0\1\u01d3\12\0\1\u01d4" + "\30\0\1\u01d5\31\0\1\u01d6\1\0\1\u01d7\12\0\1\u01d8" + "\5\0\1\u01d9\34\0\1\u01da\35\0\1\u01db\25\0\1\u01dc" + "\11\0\1\u01dd\16\0\1\u01de\1\0\1\u01df\3\0\1\u01e0" + "\37\0\1\u01e1\101\0\1\u01e2\57\0\1\u01e3\57\0\1\u01e4" + "\15\0\1\u01e5\1\0\1\u01e6\46\0\1\u01e7\64\0\1\u01e8" + "\55\0\1\u01e9\6\0\1\u01ea\3\0\1\u01eb\53\0\1\u01ec" + "\110\0\1\u01ed\41\0\1\u01ee\1\u01ef\7\0\1\u01f0\3\0" + "\1\u01f1\1\u01f2\7\0\1\u01f3\1\0\1\u01f4\35\0\1\u01f5" + "\12\0\1\u01f6\13\0\1\u01f7\36\0\1\u01f8\75\0\1\u01f9" + "\21\0\1\u01fa\43\0\1\u01fb\13\0\1\u01fc\42\0\1\u01fd" + "\33\0\1\u01fe\31\0\1\u01ff\6\0\1\u0200\1\u0201\111\0" + "\1\u0202\30\0\1\u0203\1\u0204\12\0\1\u0205\1\0\1\u0206" + "\11\0\1\u0207\5\0\1\u0208\42\0\1\u0209\110\0\1\u020a" + "\27\0\1\u020b\30\0\1\u020c\2\0\1\u020d\31\0\1\u020e" + "\64\0\1\u020f\12\0\1\u0210\101\0\1\u0211\36\0\1\u0212" + "\11\0\1\u0213\1\0\1\u0214\30\0\1\u0215\32\0\1\u0216" + "\67\0\1\u0217\102\0\1\u0218\36\0\1\u0219\74\0\1\u021a" + "\1\u021b\1\u021c\1\u021d\10\0\1\u021e\5\0\1\u021f\44\0" + "\1\u0220\100\0\1\u0221\11\0\1\u0222\55\0\1\u0223\1\u0224" + "\1\u0225\35\0\1\u0226\113\0\1\u0227\40\0\1\u0228\76\0" + "\1\u0229\67\0\1\u022a\77\0\1\u022b\36\0\1\u022c\32\0" + "\1\u022d\34\0\1\u022e\120\0\1\u022f\41\0\1\u0230\15\0" + "\1\u0231\37\0\1\u0232\12\0\1\u0233\100\0\1\u0234\40\0" + "\1\u0235\6\0\1\u0236\16\0\1\u0237\64\0\1\u0238\36\0" + "\1\u0239\32\0\1\u023a\61\0\1\u023b\3\0\1\u023c\61\0" + "\1\u023d\71\0\1\u023e\43\0\1\u023f\4\0\1\u0240\51\0" + "\1\u0241\7\0\1\u0242\64\0\1\u0243\103\0\1\u0244\47\0" + "\1\u0245\114\0\1\u0246\54\0\1\u0247\67\0\1\u0248\46\0" + "\1\u0249\1\u024a\44\0\1\u024b\46\0\1\u024b\20\0\1\u024c" + "\65\0\1\u024d\65\0\1\u024e\65\0\1\u024f\65\0\1\u0250" + "\71\0\1\u0251\24\0\1\u0252\40\0\1\u0253\75\0\1\u0254" + "\112\0\1\u0255\57\0\1\u0256\63\0\1\u0257\103\0\1\u0258" + "\32\0\1\u0259\57\0\1\u025a\114\0\1\u025b\11\0\1\u025c" + "\36\0\1\u025d\65\0\1\u025e\101\0\1\u025f\62\0\1\u0260" + "\41\0\1\u0261\77\0\1\u0262\20\0\1\u0263\63\0\1\u0264" + "\63\0\1\u0265\62\0\1\u0266\65\0\1\u0267\40\0\1\u0268" + "\100\0\1\u0269\103\0\1\u026a\35\0\1\u026b\77\0\1\u026c" + "\54\0\1\u026d\63\0\1\u026e\65\0\1\u026f\25\0\1\u0270" + "\1\0\1\u0271\3\0\1\u0272\67\0\1\u0273\1\0\1\u0274" + "\41\0\1\u0275\10\0\1\u0276\71\0\1\u0277\35\0\1\u0278" + "\100\0\1\u0279\110\0\1\u027a\26\0\1\u027b\131\0\1\u027c" + "\22\0\1\u027d\60\0\1\u027e\110\0\1\u027f\73\0\1\u0280" + "\104\0\1\u0281\57\0\1\u0282\1\0\1\u0283\54\0\1\u0284" + "\67\0\1\u0285\36\0\1\u0286\13\0\1\u0287\15\0\1\u0288" + "\32\0\1\u0289\66\0\1\u028a\7\0\1\u028b\100\0\1\u028c" + "\104\0\1\u028d\21\0\1\u028e\112\0\1\u028f\54\0\1\u0290" + "\40\0\1\u0291\2\0\1\u0291\2\0\1\u0291\43\0\2\u0291" + "\54\0\1\u0292\47\0\1\u0293\70\0\1\u0294\63\0\1\u0295" + "\14\0\1\u0296\35\0\1\u0297\65\0\1\u0298\76\0\1\u0299" + "\23\0\1\u029a\1\0\1\u029b\60\0\1\u029c\46\0\1\u029d" + "\100\0\1\u029e\46\0\1\u029f\70\0\1\u02a0\52\0\1\u02a1" + "\1\u02a2\64\0\1\u02a3\66\0\1\u02a4\113\0\1\u02a5\70\0" + "\1\u02a6\33\0\1\u02a7\75\0\1\u02a8\66\0\1\u02a9\56\0" + "\1\u02aa\77\0\1\u02ab\63\0\1\u02ac\54\0\1\u02ad\121\0" + "\1\u02ae\62\0\1\u02af\34\0\1\u02b0\6\0\1\u02b1\2\0" + "\1\u02b2\1\u02b3\1\0\1\u02b4\47\0\1\u02b5\101\0\1\u02b6" + "\70\0\1\u02b7\60\0\1\u02b8\54\0\1\u02b9\74\0\1\u02ba" + "\55\0\1\u02bb\32\0\1\u02bc\1\u02bd\32\0\1\u02be\53\0" + "\1\u02bf\2\0\1\u02bf\2\0\1\u02bf\43\0\2\u02bf\24\0" + "\1\u02c0\123\0\1\u02c1\36\0\1\u02c2\3\0\1\u02c3\21\0" + "\1\u02c4\31\0\1\u02c5\64\0\1\u02c6\75\0\1\u02c7\17\0" + "\1\u02c8\72\0\1\u02c9\1\0\1\u02ca\14\0\1\u02cb\2\0" + "\1\u02cb\2\0\1\u02cb\43\0\2\u02cb\35\0\1\u02cc\107\0" + "\1\u02cd\71\0\1\u02ce\27\0\1\u02cf\63\0\1\u02d0\112\0" + "\1\u02d1\65\0\1\u02d2\70\0\1\u02d3\4\0\1\u02d4\1\0" + "\1\u02d5\4\0\1\u02d6\23\0\1\u02d7\64\0\1\u02d8\100\0" + "\1\u02d9\21\0\1\u02da\1\0\1\u02db\41\0\1\u02dc\61\0" + "\1\u02dd\4\0\1\u02de\106\0\1\u02df\1\0\1\u02e0\41\0" + "\1\u02e1\102\0\1\u02e2\65\0\1\u02e3\61\0\1\u02e4\50\0" + "\1\u02e5\66\0\1\u02e6\112\0\1\u02e7\46\0\1\u02e8\77\0" + "\1\u02e9\35\0\1\u02ea\114\0\1\u02eb\46\0\1\u02ec\107\0" + "\1\u02ed\64\0\1\u02ee\3\0\1\u02ef\54\0\1\u02f0\1\0" + "\1\u02f1\1\0\1\u02f2\5\0\1\u02f3\55\0\1\u02f4\14\0" + "\1\u02f5\22\0\1\u02f6\116\0\1\u02f7\1\u02f8\1\u02f9\63\0" + "\1\u02fa\35\0\1\u02fb\26\0\1\u02fc\47\0\1\u02fd\101\0" + "\1\u02fe\63\0\1\u02ff\40\0\1\u0300\113\0\1\u0301\2\0"
		+ "\1\u0302\63\0\1\u0303\37\0\1\u0304\6\0\1\u0305\3\0" + "\1\u0306\61\0\1\u0307\1\u0308\2\0\1\u0309\51\0\1\u030a" + "\65\0\1\u030b\24\0\1\u030c\107\0\1\u030d\20\0\1\u030e" + "\122\0\1\u030f\60\0\1\u0310\65\0\1\u0311\3\0\1\u0312" + "\42\0\1\u0313\101\0\1\u0314\65\0\1\u0315\52\0\1\u0316" + "\65\0\1\u0317\51\0\1\u0318\61\0\1\u0319\17\0\1\u031a" + "\110\0\1\u031b\66\0\1\u031c\54\0\1\u031d\102\0\1\u031e" + "\35\0\1\u031f\101\0\1\u0320\62\0\1\u0321\40\0\1\u0322" + "\76\0\1\u0323\112\0\1\u0324\1\0\1\u0325\41\0\1\u0326" + "\114\0\1\u0327\55\0\1\u0328\33\0\1\u0329\103\0\1\u032a" + "\73\0\1\u032b\40\0\1\u032c\67\0\1\u032d\123\0\1\u032e" + "\74\0\1\u032f\17\0\1\u0330\66\0\1\u0331\113\0\1\u0332" + "\51\0\1\u0333\64\0\1\u0334\66\0\1\u0335\103\0\1\u0336" + "\43\0\1\u0337\16\0\1\u0338\66\0\1\u0339\51\0\1\u033a" + "\51\0\1\u033b\24\0\1\u033c\67\0\1\u033d\40\0\1\u033e" + "\75\0\1\u033f\105\0\1\u0340\51\0\1\u0341\74\0\1\u0342" + "\54\0\1\u0343\65\0\1\u0344\64\0\1\u0345\65\0\1\u0346" + "\17\0\1\u0347\62\0\1\u0348\72\0\1\u0349\74\0\1\u034a" + "\22\0\1\u034b\64\0\1\u034c\24\0\1\u034d\42\0\1\u034e" + "\25\0\1\u034f\62\0\1\u0350\54\0\1\u0351\76\0\1\u0352" + "\74\0\1\u0353\31\0\1\u0354\101\0\1\u0355\52\0\1\u0356" + "\66\0\1\u0357\123\0\1\u0358\57\0\1\u0359\63\0\1\u035a" + "\67\0\1\u035b\66\0\1\u035c\10\0\1\u035d\23\0\1\u035e" + "\74\0\1\u035f\56\0\1\u0360\110\0\1\u0361\16\0\1\u0362" + "\37\0\1\u0363\74\0\1\u0364\111\0\1\u0365\46\0\1\u0366" + "\44\0\1\u0367\64\0\1\u0368\102\0\1\u0369\42\0\1\u036a" + "\110\0\1\u036b\41\0\1\u036c\75\0\1\u036d\54\0\1\u036e" + "\33\0\1\u036f\31\0\1\u0370\117\0\1\u0371\60\0\1\u0372" + "\51\0\1\u0373\31\0\1\u0374\4\0\1\u0375\45\0\1\u0376" + "\35\0\1\u0377\1\u0378\11\0\1\u0379\3\0\1\u037a\5\0" + "\1\u037b\11\0\1\u037c\26\0\1\u037d\66\0\1\u037e\100\0" + "\1\u037f\51\0\1\u0380\75\0\1\u0381\103\0\1\u0382\75\0" + "\1\u0383\1\0\1\u0384\36\0\1\u0385\55\0\1\u0386\75\0" + "\1\u0387\1\u0388\20\0\1\u0389\2\0\1\u038a\43\0\1\u038b" + "\51\0\1\u038c\1\u038d\1\u038e\5\0\1\u038f\5\0\1\u0390" + "\10\0\1\u0391\2\0\1\u0392\4\0\1\u0393\53\0\1\u0394" + "\57\0\1\u0395\7\0\1\u0396\1\0\1\u0397\63\0\1\u0398" + "\63\0\1\u0399\34\0\1\u039a\105\0\1\u039b\2\0\1\u039c" + "\5\0\1\u039d\4\0\1\u039e\1\0\1\u039f\33\0\1\u03a0" + "\6\0\1\u03a1\20\0\1\u03a2\3\0\1\u03a3\1\0\1\u03a4" + "\56\0\1\u03a5\100\0\1\u03a6\22\0\1\u03a7\77\0\1\u03a8" + "\53\0\1\u03a9\66\0\1\u03aa\126\0\1\u03ab\62\0\1\u03ac" + "\57\0\1\u03ad\35\0\1\u03ae\65\0\1\u03af\126\0\1\u03b0" + "\36\0\1\u03b1\76\0\1\u03b2\65\0\1\u03b3\54\0\1\u03b4" + "\52\0\1\u03b5\1\u03b6\13\0\1\u03b7\6\0\1\u03b8\1\0" + "\1\u03b9\6\0\1\u03ba\1\0\1\u03bb\55\0\1\u03bc\62\0" + "\1\u03bd\42\0\1\u03be\112\0\1\u03bf\51\0\1\u03c0\77\0" + "\1\u03c1\55\0\1\u03c2\12\0\1\u03c3\51\0\1\u03c4\100\0" + "\1\u03c5\3\0\1\u03c6\1\u03c7\75\0\1\u03c8\23\0\1\u03c9" + "\45\0\1\u03ca\16\0\1\u03cb\120\0\1\u03cc\75\0\1\u03cd" + "\22\0\1\u03ce\66\0\1\u03cf\65\0\1\u03d0\76\0\1\u03d1" + "\54\0\1\u03d2\120\0\1\u03d3\57\0\1\u03d4\67\0\1\u03d5" + "\67\0\1\u03d6\61\0\1\u03d7\51\0\1\u03d8\101\0\1\u03d9" + "\63\0\1\u03da\65\0\1\u03db\74\0\1\u03dc\71\0\1\u03dd" + "\37\0\1\u03de\23\0\1\u03df\1\0\1\u03e0\57\0\1\u03e1" + "\47\0\1\u03e2\76\0\1\u03e3\70\0\1\u03e4\36\0\1\u03e5" + "\100\0\1\u03e6\15\0\1\u03e7\35\0\1\u03e8\115\0\1\u03e9" + "\63\0\1\u03ea\1\0\1\u03eb\65\0\1\u03ec\35\0\1\u03ed" + "\113\0\1\u03ee\70\0\1\u03ef\45\0\1\u03f0\53\0\1\u03f1" + "\1\u03f2\13\0\1\u03f3\10\0\1\u03f4\5\0\1\u03f5\1\0" + "\1\u03f6\56\0\1\u03f7\37\0\1\u03f8\127\0\1\u03f9\50\0" + "\1\u03fa\14\0\1\u03fb\23\0\1\u03fc\117\0\1\u03fd\61\0" + "\1\u03fe\36\0\1\u03ff\102\0\1\u0400\104\0\1\u0401\67\0" + "\1\u0402\43\0\1\u0403\100\0\1\u0404\36\0\1\u0405\114\0" + "\1\u0406\64\0\1\u0407\40\0\1\u0408\76\0\1\u0409\70\0" + "\1\u040a\41\0\1\u040b\46\0\1\u040b\11\0\1\u040c\15\0" + "\1\u040c\1\0\1\u040c\45\0\1\u040d\15\0\1\u040d\1\0" + "\1\u040d\45\0\1\u040e\15\0\1\u040e\1\0\1\u040e\45\0" + "\1\u040f\15\0\1\u040f\1\0\1\u040f\45\0\1\u0410\15\0" + "\1\u0410\1\0\1\u0410\45\0\1\u0411\15\0\1\u0411\1\0" + "\1\u0411\45\0\1\u0412\15\0\1\u0412\1\0\1\u0412\45\0" + "\1\u0413\15\0\1\u0413\1\0\1\u0413\45\0\1\u0414\15\0" + "\1\u0414\1\0\1\u0414\45\0\1\u0415\15\0\1\u0415\1\0" + "\1\u0415\45\0\1\u0416\15\0\1\u0416\1\0\1\u0416\45\0" + "\1\u0417\15\0\1\u0417\1\0\1\u0417\45\0\1\u0418\15\0" + "\1\u0418\1\0\1\u0418\45\0\1\u0419\15\0\1\u0419\1\0" + "\1\u0419\45\0\1\u041a\15\0\1\u041a\1\0\1\u041a\45\0" + "\1\u041b\15\0\1\u041b\1\0\1\u041b\45\0\1\u041c\15\0" + "\1\u041c\1\0\1\u041c\45\0\1\u041d\15\0\1\u041d\1\0" + "\1\u041d\45\0\1\u041e\15\0\1\u041e\1\0\1\u041e\52\0" + "\1\u041f\46\0\1\u041f\11\0\1\u040c\15\0\1\u040c\1\0" + "\1\u040c\6\0\1\u0420\10\0\1\u0421\4\0\1\u0422\1\u0423" + "\1\u0424\16\0\1\u040d\13\0\1\u0425\1\0\1\u040d\1\0" + "\1\u040d\5\0\1\u0426\1\u0427\1\u0428\7\0\1\u0429\1\0" + "\1\u042a\2\0\1\u042b\1\0\1\u042c\1\u042d\1\0\1\u042e" + "\13\0\1\u040e\15\0\1\u040e\1\0\1\u040e\2\0\1\u042f" + "\3\0\1\u0430\14\0\1\u0431\21\0\1\u040f\14\0\1\u0432" + "\1\u040f\1\0\1\u040f\6\0\1\u0433\22\0\1\u0434\13\0" + "\1\u0410\15\0\1\u0410\1\0\1\u0410\31\0\1\u0435\13\0" + "\1\u0411\14\0\1\u0436\1\u0411\1\0\1\u0411\6\0\1\u0437" + "\22\0\1\u0438\13\0\1\u0412\5\0\2\u0439\3\0\3\u0439" + "\1\u0412\1\0\1\u0412\2\0\10\u0439\5\0\14\u0439\3\0" + "\2\u0439\1\0\1\u0439\3\0\1\u0413\14\0\1\u043a\1\u0413" + "\1\0\1\u0413\6\0\1\u043b\22\0\1\u043c\13\0\1\u0414" + "\14\0\1\u043d\1\u0414\1\0\1\u0414\6\0\1\u043e\22\0" + "\1\u043f\13\0\1\u0415\15\0\1\u0415\1\0\1\u0415\6\0" + "\1\u0440\13\0\1\u0441\22\0\1\u0416\5\0\2\u0442\3\0" + "\3\u0442\1\u0416\1\0\1\u0416\2\0\10\u0442\5\0\14\u0442" + "\3\0\2\u0442\1\0\1\u0442\3\0\1\u0417\15\0\1\u0417" + "\1\0\1\u0417\5\0\1\u0443\13\0\1\u0444\1\0\1\u0445" + "\12\0\1\u0446\6\0\1\u0418\13\0\1\u0447\1\0\1\u0418" + "\1\0\1\u0418\6\0\1\u0448\2\0\1\u0449\14\0\1\u044a" + "\16\0\1\u0419\14\0\1\u044b\1\u0419\1\0\1\u0419\3\0" + "\1\u044c\1\u044d\16\0\1\u044e\1\u044f\1\0\1\u0450\1\u0451" + "\1\0\1\u0452\13\0\1\u041a\12\0\1\u0453\2\0\1\u041a" + "\1\0\1\u041a\4\0\1\u0454\1\0\1\u0455\1\0\1\u0456" + "\14\0\1\u0457\1\u0458\7\0\1\u0459\1\u045a\5\0\1\u041b" + "\12\0\1\u045b\1\u045c\1\u045d\1\u041b\1\0\1\u041b\3\0" + "\1\u045e\1\0\1\u045f\2\0\1\u0460\1\u0461\5\0\1\u0462" + "\2\0\1\u0463\1\u0464\1\u0465\1\u0466\1\u0467\7\0\1\u0468" + "\6\0\1\u041c\14\0\1\u0469\1\u041c\1\0\1\u041c\5\0" + "\1\u046a\2\0\1\u046b\1\u046c\10\0\1\u046d\1\u046e\2\0" + "\1\u046f\7\0\1\u0470\6\0\1\u041d\15\0\1\u041d\1\0" + "\1\u041d\4\0\1\u0471\4\0\1\u0472\13\0\1\u0473\11\0" + "\1\u0474\5\0\1\u041e\12\0\1\u0475\1\u0476\1\u0477\1\u041e" + "\1\0\1\u041e\2\0\1\u0478\2\0\1\u0479\1\u047a\1\u047b" + "\1\0\1\u047c\5\0\1\u047d\2\0\1\u047e\1\u047f\1\u0480" + "\1\0\1\u0481\2\0\1\u0482\1\u0483\17\0\1\u0484\46\0" + "\1\u0484\26\0\1\u0485\32\0\1\u0486\75\0\1\u0487\31\0" + "\1\u0488\15\0\1\u0489\36\0\1\u048a\66\0\1\u048b\75\0" + "\1\u048c\3\0\1\u048d\61\0\1\u048e\56\0\1\u048f\63\0" + "\1\u0490\13\0\1\u0491\12\0\1\u0492\37\0\1\u0493\34\0" + "\1\u0494\62\0\1\u0495\43\0\1\u0496\55\0\1\u0497\76\0" + "\1\u0498\12\0\1\u0499\41\0\1\u049a\33\0\1\u049b\65\0" + "\1\u049c\63\0\1\u049d\33\0\1\u049e\10\0\1\u049f\64\0" + "\1\u04a0\107\0\1\u04a1\1\0\1\u04a2\31\0\1\u04a3\65\0" + "\1\u04a4\75\0\1\u04a5\107\0\1\u04a6\1\0\1\u04a7\31\0" + "\1\u04a8\53\0\1\u0439\2\0\4\u0439\2\0\3\u0439\5\0" + "\10\u0439\5\0\16\u0439\1\0\2\u0439\1\0\1\u0439\27\0" + "\1\u04a9\107\0\1\u04aa\1\0\1\u04ab\31\0\1\u04ac\75\0" + "\1\u04ad\107\0\1\u04ae\1\0\1\u04af\31\0\1\u04b0\111\0" + "\1\u04b1\53\0\1\u04b2\41\0\1\u0442\2\0\4\u0442\2\0" + "\3\u0442\5\0\10\u0442\5\0\16\u0442\1\0\2\u0442\1\0" + "\1\u0442\30\0\1\u04b3\65\0\1\u04b4\54\0\1\u04b5\25\0" + "\1\u04b6\71\0\1\u04b7\44\0\1\u04b8\105\0\1\u04b9\33\0" + "\1\u04ba\100\0\1\u04bb\63\0\1\u04bc\1\u04bd\67\0\1\u04be" + "\66\0\1\u04bf\102\0\1\u04c0\34\0\1\u04c1\7\0\1\u04c2" + "\1\u04c3\14\0\1\u04c4\65\0\1\u04c5\40\0\1\u04c6\65\0" + "\1\u04c7\74\0\1\u04c8\54\0\1\u04c9\1\0\1\u04ca\44\0" + "\1\u04cb\43\0\1\u04cc\51\0\1\u04cd\54\0\1\u04ce\1\0" + "\1\u04cf\44\0\1\u04d0\17\0\1\u04d1\65\0\1\u04d2\76\0" + "\1\u04d3\100\0\1\u04d4\65\0\1\u04d5\65\0\1\u04d6\57\0" + "\1\u04d7\57\0\1\u04d8\65\0\1\u04d9\65\0\1\u04da\112\0" + "\1\u04db\54\0\1\u04dc\52\0\1\u04dd\54\0\1\u04de\64\0" + "\1\u04df\12\0\1\u04e0\64\0\1\u04e1\20\0\1\u04e2\65\0" + "\1\u04e3\57\0\1\u04e4\52\0\1\u04e5\70\0\1\u04e6\51\0" + "\1\u04e7\101\0\1\u04e8\63\0\1\u04e9\105\0\1\u04ea\65\0" + "\1\u04eb\44\0\1\u04ec\16\0\1\u04ed\2\0\1\u04ee\60\0" + "\1\u04ef\50\0\1\u04f0\16\0\1\u04f1\64\0\1\u04f2\46\0" + "\1\u04f3\13\0\1\u04f4\42\0\1\u04f5\74\0\1\u04f6\21\0" + "\1\u04f7\4\0\1\u04f8\36\0\1\u04f9\66\0\1\u04fa\2\0" + "\1\u04fb\75\0\1\u04fc\42\0\1\u04fd\63\0\1\u04fe\24\0" + "\1\u04ff\50\0\1\u0500\66\0\1\u0501\55\0\1\u0502\7\0" + "\1\u0503\1\u0504\54\0\1\u0505\76\0\1\u0506\20\0\1\u0507" + "\32\0\1\u0508\1\0\1\u0509\5\0\1\u050a\4\0\1\u050b" + "\15\0\1\u050c\57\0\1\u050d\32\0\1\u050e\46\0\1\u050e" + "\36\0\1\u050f\70\0\1\u0510\101\0\1\u0511\73\0\1\u0512" + "\37\0\1\u0513\107\0\1\u0514\60\0\1\u0515\76\0\1\u0516" + "\42\0\1\u0517\115\0\1\u0518\32\0\1\u0519\107\0\1\u051a" + "\57\0\1\u051b\73\0\1\u051c\33\0\1\u051d\116\0\1\u051e" + "\33\0\1\u051f\101\0\1\u0520\63\0\1\u0521\67\0\1\u0522" + "\62\0\1\u0523\107\0\1\u0524\43\0\1\u0525\1\u0526\104\0" + "\1\u0527\47\0\1\u0528\63\0\1\u0529\13\0\1\u052a\53\0" + "\1\u052b\103\0\1\u052c\53\0\1\u052d\60\0\1\u052e\106\0" + "\1\u052f\34\0\1\u0530\30\0\1\u0531\63\0\1\u0532\53\0" + "\1\u0533\60\0\1\u0534\106\0\1\u0535\63\0\1\u0536\53\0" + "\1\u0537\60\0\1\u0538\106\0\1\u0539\63\0\1\u053a\53\0" + "\1\u053b\60\0\1\u053c\106\0\1\u053d\34\0\1\u053e\115\0" + "\1\u053f\43\0\1\u0540\66\0\1\u0541\66\0\1\u0542\65\0" + "\1\u0543\102\0\1\u0544\50\0\1\u0545\104\0\1\u0546\51\0" + "\1\u0547\77\0\1\u0548\67\0\1\u0549\65\0\1\u054a\35\0" + "\1\u054b\66\0\1\u054c\64\0\1\u054d\76\0\1\u054e\112\0" + "\1\u054f\55\0\1\u0550\47\0\1\u0551\70\0\1\u0552\64\0" + "\1\u0553\105\0\1\u0554\45\0\1\u0555\77\0\1\u0556\52\0" + "\1\u0557\64\0\1\u0558\54\0\1\u0559\65\0\1\u055a\112\0"
		+ "\1\u055b\52\0\1\u055c\64\0\1\u055d\66\0\1\u055e\1\u055f" + "\63\0\1\u0560\107\0\1\u0561\70\0\1\u0562\63\0\1\u0563" + "\45\0\1\u0564\53\0\1\u0565\127\0\1\u0566\52\0\1\u0567" + "\35\0\1\u0568\116\0\1\u0569\65\0\1\u056a\50\0\1\u056b" + "\75\0\1\u056c\105\0\1\u056d\52\0\1\u056e\34\0\1\u056f" + "\113\0\1\u0570\65\0\1\u0571\74\0\1\u0572\37\0\1\u0573" + "\57\0\1\u0574\115\0\1\u0575\62\0\1\u0576\37\0\1\u0577" + "\122\0\1\u0578\56\0\1\u0579\70\0\1\u057a\62\0\1\u057b" + "\65\0\1\u057c\50\0\1\u057d\105\0\1\u057e\62\0\1\u057f" + "\63\0\1\u0580\53\0\1\u0581\54\0\1\u0582\33\0\1\u0583" + "\62\0\1\u0584\51\0\1\u0585\61\0\1\u0586\104\0\1\u0587" + "\34\0\1\u0588\64\0\1\u0589\67\0\1\u058a\74\0\1\u058b" + "\112\0\1\u058c\44\0\1\u058d\50\0\1\u058e\65\0\1\u058f" + "\67\0\1\u0590\75\0\1\u0591\72\0\1\u0592\63\0\1\u0593" + "\75\0\1\u0594\42\0\1\u0595\63\0\1\u0596\76\0\1\u0597" + "\107\0\1\u0598\57\0\1\u0599\73\0\1\u059a\64\0\1\u059b" + "\44\0\1\u059c\46\0\1\u059d\46\0\1\u059d\56\0\1\u059e" + "\35\0\1\u059f\65\0\1\u05a0\77\0\1\u05a1\111\0\1\u05a2" + "\27\0\1\u05a3\76\0\1\u05a4\13\0\1\u05a5\5\0\1\u05a6" + "\55\0\1\u05a7\52\0\1\u05a8\100\0\1\u05a9\42\0\1\u05aa" + "\127\0\1\u05ab\22\0\1\u05ac\64\0\1\u05ad\76\0\1\u05ae" + "\66\0\1\u05af\100\0\1\u05b0\54\0\1\u05b1\64\0\1\u05b2" + "\54\0\1\u05b3\64\0\1\u05b4\26\0\1\u05b5\37\0\1\u05b6" + "\65\0\1\u05b7\63\0\1\u05b8\27\0\1\u05b9\3\0\1\u05ba" + "\12\0\1\u05bb\45\0\1\u05bc\70\0\1\u05bd\52\0\1\u05be" + "\57\0\1\u05bf\106\0\1\u05c0\35\0\1\u05c1\63\0\1\u05c2" + "\102\0\1\u05c3\52\0\1\u05c4\131\0\1\u05c5\21\0\1\u05c6" + "\65\0\1\u05c7\63\0\1\u05c8\102\0\1\u05c9\52\0\1\u05ca" + "\65\0\1\u05cb\63\0\1\u05cc\102\0\1\u05cd\52\0\1\u05ce" + "\65\0\1\u05cf\63\0\1\u05d0\102\0\1\u05d1\52\0\1\u05d2" + "\63\0\1\u05d3\1\0\1\u05d4\24\0\1\u05d5\1\u05d6\37\0" + "\1\u05d7\13\0\1\u05d8\10\0\1\u05d9\1\u05da\62\0\1\u05db" + "\70\0\1\u05dc\51\0\1\u05dd\51\0\1\u05de\114\0\1\u05df" + "\40\0\1\u05e0\77\0\1\u05e1\65\0\1\u05e2\111\0\1\u05e3" + "\71\0\1\u05e4\65\0\1\u05e5\23\0\1\u05e6\73\0\1\u05e7" + "\3\0\1\u05e8\63\0\1\u05e9\107\0\1\u05ea\45\0\1\u05eb" + "\100\0\1\u05ec\76\0\1\u05ed\62\0\1\u05ee\57\0\1\u05ef" + "\102\0\1\u05f0\46\0\1\u05f1\77\0\1\u05f2\30\0\1\u05f3" + "\115\0\1\u05f4\63\0\1\u05f5\54\0\1\u05f6\105\0\1\u05f7" + "\30\0\1\u05f8\115\0\1\u05f9\46\0\1\u05fa\63\0\1\u05fb" + "\120\0\1\u05fc\21\0\1\u05fd\67\0\1\u05fe\64\0\1\u05ff" + "\66\0\1\u0600\77\0\1\u0601\16\0\1\u0602\57\0\1\u0603" + "\104\0\1\u0604\37\0\1\u0605\61\0\1\u0606\67\0\1\u0607" + "\51\0\1\u0608\75\0\1\u0609\57\0\1\u060a\75\0\1\u060b" + "\100\0\1\u060c\65\0\1\u060d\67\0\1\u060e\40\0\1\u060f" + "\110\0\1\u0610\42\0\1\u0611\120\0\1\u0612\57\0\1\u0613" + "\47\0\1\u0614\104\0\1\u0615\64\0\1\u0616\63\0\1\u0617" + "\52\0\1\u0618\70\0\1\u0619\66\0\1\u061a\74\0\1\u061b" + "\52\0\1\u061c\102\0\1\u061d\63\0\1\u061e\55\0\1\u061f" + "\52\0\1\u0620\76\0\1\u0621\77\0\1\u0622\65\0\1\u0623" + "\65\0\1\u0624\73\0\1\u0625\73\0\1\u0626\1\u0627\50\0" + "\1\u0628\40\0\1\u0629\67\0\1\u062a\77\0\1\u062b\101\0" + "\1\u062c\37\0\1\u062d\110\0\1\u062e\54\0\1\u062f\76\0" + "\1\u0630\40\0\1\u0631\75\0\1\u0632\67\0\1\u0633\54\0" + "\1\u0634\26\0\1\u0635\50\0\1\u0636\116\0\1\u0637\23\0" + "\1\u0638\113\0\1\u0639\62\0\1\u063a\41\0\1\u063b\56\0" + "\1\u063c\46\0\1\u063c\16\0\1\u063d\46\0\1\u063d\16\0" + "\1\u063e\46\0\1\u063e\16\0\1\u063f\46\0\1\u063f\16\0" + "\1\u0640\46\0\1\u0640\16\0\1\u0641\46\0\1\u0641\16\0" + "\1\u0642\46\0\1\u0642\16\0\1\u0643\46\0\1\u0643\16\0" + "\1\u0644\46\0\1\u0644\16\0\1\u0645\46\0\1\u0645\16\0" + "\1\u0646\46\0\1\u0646\16\0\1\u0647\46\0\1\u0647\16\0" + "\1\u0648\46\0\1\u0648\16\0\1\u0649\46\0\1\u0649\16\0" + "\1\u064a\46\0\1\u064a\16\0\1\u064b\46\0\1\u064b\16\0" + "\1\u064c\46\0\1\u064c\16\0\1\u064d\46\0\1\u064d\16\0" + "\1\u064e\46\0\1\u064e\16\0\1\u064f\46\0\1\u064f\16\0" + "\1\u0650\46\0\1\u0650\16\0\1\u0651\46\0\1\u0651\16\0" + "\1\u0652\46\0\1\u0652\10\0";
	
	private static int[] zzUnpackTrans()
	{
		int[] result = new int[54702];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}
	
	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;
	
	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };
	
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	
	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\5\1\1\11\15\1\3\11\21\1\1\11" + "\2\1\7\0\1\1\31\0\1\11\2\1\23\0\1\1" + "\56\0\1\1\4\0\1\1\2\0\3\11\14\0\1\1" + "\1\0\1\1\100\0\5\11\1\1\70\0\2\11\14\0" + "\1\1\u0110\0\1\1\1\11\1\0\12\11\1\0\3\11" + "\1\0\141\11\1\0\51\11\1\0\24\11\1\0\6\11" + "\1\0\27\11\1\0\4\11\1\0\5\11\1\0\31\11" + "\2\0\1\11\1\0\57\11\1\0\66\11\2\0\3\11" + "\1\0\62\11\1\0\11\11\1\0\35\11\1\1\23\0" + "\1\1\31\0\1\1\10\0\1\1\101\0\1\1\211\0" + "\1\1\216\0\1\1\236\11\26\1\1\11";
	
	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[1618];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}
	
	/** the input device */
	private java.io.Reader zzReader;
	
	/** the current state of the DFA */
	private int zzState;
	
	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;
	
	/**
	 * this buffer contains the current text to be matched and is the source of the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
	
	/** the textposition at the last accepting state */
	private int zzMarkedPos;
	
	/** the current text position in the buffer */
	private int zzCurrentPos;
	
	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;
	
	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;
	
	/** number of newlines encountered up to the start of the matched text */
	private int yyline;
	
	/** the number of characters up to the start of the matched text */
	private int yychar;
	
	/**
	 * the number of characters from the last newline up to the start of the matched text
	 */
	private int yycolumn;
	
	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;
	
	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;
	
	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;
	
	/* user code: */
	public CAOSLexer()
	{
		super();
	}
	
	protected StringBuilder stringLiteral = new StringBuilder();
	
	protected TokenType currTokenType;
	protected String currTokenValue;
	protected boolean eof;
	
	public TokenType getTokenType()
	{
		return currTokenType;
	}
	
	public String getTokenValue()
	{
		if (currTokenValue == null)
		{
			if (currTokenType == LITERAL_STRING)
				currTokenValue = stringLiteral.toString();
			else
				currTokenValue = yytext();
		}
		return currTokenValue;
	}
	
	public boolean isEOF()
	{
		return eof;
	}
	
	public int getLineNumber()
	{
		return yyline + 1;
	}
	
	public int getColumnNumber()
	{
		return yycolumn + 1;
	}
	
	public int getPosition()
	{
		return zzStartRead;
	}
	
	public Reader getReader()
	{
		return zzReader;
	}
	
	public void setReader(Reader reader)
	{
		this.zzReader = new FinalLineAppendingReader(reader); // JFlex can't match EOF, so this makes the $-terminated expressions work correctly
	}
	
	public void next() throws IOException, TextSyntaxCheckedException
	{
		currTokenValue = null;
		next0();
	}
	
	public void close() throws IOException
	{
		yyclose();
	}
	
	public void reset()
	{
		eof = false;
		currTokenType = null;
		currTokenValue = null;
		stringLiteral.setLength(0);
		yyreset(zzReader);
	}
	
	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public CAOSLexer(java.io.Reader in)
	{
		this.zzReader = in;
	}
	
	/**
	 * Creates a new scanner. There is also java.io.Reader version of this constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public CAOSLexer(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}
	
	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed)
	{
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 1356)
		{
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}
	
	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{
		
		/* first: make room (if you can) */
		if (zzStartRead > 0)
		{
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);
			
			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}
		
		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length)
		{
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}
		
		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);
		
		if (numRead > 0)
		{
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream
		if (numRead == 0)
		{
			int c = zzReader.read();
			if (c == -1)
			{
				return true;
			}
			else
			{
				zzBuffer[zzEndRead++] = (char)c;
				return false;
			}
		}
		
		// numRead < 0
		return true;
	}
	
	/**
	 * Closes the input stream.
	 */
	private final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */
		
		if (zzReader != null)
			zzReader.close();
	}
	
	/**
	 * Resets the scanner to read from a new input stream. Does not close the old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	private final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}
	
	/**
	 * Returns the current lexical state.
	 */
	private final int yystate()
	{
		return zzLexicalState;
	}
	
	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	private final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}
	
	/**
	 * Returns the text matched by the current regular expression.
	 */
	private final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}
	
	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	private final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}
	
	/**
	 * Returns the length of the matched text region.
	 */
	private final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}
	
	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) throws ImpossibleException
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
		
		throw new ImpossibleException(message);
	}
	
	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must not be greater than yylength()!
	 */
	private void yypushback(int number) throws ImpossibleException
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);
		
		zzMarkedPos -= number;
	}
	
	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private void next0() throws java.io.IOException, TextSyntaxCheckedException, ImpossibleException
	{
		int zzInput;
		int zzAction;
		
		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;
		
		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;
		
		while (true)
		{
			zzMarkedPosL = zzMarkedPos;
			
			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++)
			{
				switch (zzBufferL[zzCurrentPosL])
				{
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else
						{
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn++;
				}
			}
			
			if (zzR)
			{
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else
				{
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;
			
			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
			
			zzState = ZZ_LEXSTATE[zzLexicalState];
			
			zzForAction:
			{
				while (true)
				{
					
					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					}
					else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						}
						else
						{
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;
					
					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}
					
				}
			}
			
			// store back cached position
			zzMarkedPos = zzMarkedPosL;
			
			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
				case 309:
				{
					currTokenType = TOKEN_DBGA;
					return;
				}
				case 615:
					break;
				case 313:
				{
					currTokenType = TOKEN_DELR;
					return;
				}
				case 616:
					break;
				case 373:
				{
					currTokenType = TOKEN_POSB;
					return;
				}
				case 617:
					break;
				case 508:
				{
					currTokenType = TOKEN_URGE_SHOU;
					return;
				}
				case 618:
					break;
				case 269:
				{
					currTokenType = TOKEN_EVER;
					return;
				}
				case 619:
					break;
				case 571:
				{
					currTokenType = TOKEN_PAT_MOVE;
					return;
				}
				case 620:
					break;
				case 63:
				{
					currTokenType = TOKEN_RELX;
					return;
				}
				case 621:
					break;
				case 298:
				{
					currTokenType = TOKEN_DRIV;
					return;
				}
				case 622:
					break;
				case 517:
				{
					currTokenType = TOKEN_BRN_DMPD;
					return;
				}
				case 623:
					break;
				case 255:
				{
					currTokenType = TOKEN_GTOS;
					return;
				}
				case 624:
					break;
				case 286:
				{
					currTokenType = TOKEN_LOCI;
					return;
				}
				case 625:
					break;
				case 121:
				{
					currTokenType = TOKEN_ALTR;
					return;
				}
				case 626:
					break;
				case 314:
				{
					currTokenType = TOKEN_DELM;
					return;
				}
				case 627:
					break;
				case 140:
				{
					currTokenType = TOKEN_OOWW;
					return;
				}
				case 628:
					break;
				case 16:
				{
					currTokenType = TOKEN_OR;
					return;
				}
				case 629:
					break;
				case 258:
				{
					currTokenType = TOKEN_GALL;
					return;
				}
				case 630:
					break;
				case 45:
				{
					currTokenType = TOKEN_RTAR;
					return;
				}
				case 631:
					break;
				case 169:
				{
					currTokenType = TOKEN_MODU;
					return;
				}
				case 632:
					break;
				case 410:
				{
					currTokenType = TOKEN_FORF;
					return;
				}
				case 633:
					break;
				case 476:
				{
					currTokenType = TOKEN_NET_PASS;
					return;
				}
				case 634:
					break;
				case 180:
				{
					currTokenType = TOKEN_MCLR;
					return;
				}
				case 635:
					break;
				case 355:
				{
					currTokenType = TOKEN_CMRP;
					return;
				}
				case 636:
					break;
				case 565:
				{
					currTokenType = TOKEN_PRAY_INJT;
					return;
				}
				case 637:
					break;
				case 604:
				{
					currTokenType = TOKEN_HIST_COUN;
					return;
				}
				case 638:
					break;
				case 411:
				{
					currTokenType = TOKEN_FMLY;
					return;
				}
				case 639:
					break;
				case 462:
				{
					currTokenType = TOKEN_CD_INIT;
					return;
				}
				case 640:
					break;
				case 52:
				{
					currTokenType = TOKEN_ROTN;
					return;
				}
				case 641:
					break;
				case 486:
				{
					currTokenType = TOKEN_NET_WHOZ;
					return;
				}
				case 642:
					break;
				case 289:
				{
					currTokenType = TOKEN_LOWA;
					return;
				}
				case 643:
					break;
				case 109:
				{
					currTokenType = TOKEN_ATTN;
					return;
				}
				case 644:
					break;
				case 557:
				{
					currTokenType = TOKEN_PRAY_AGTI;
					return;
				}
				case 645:
					break;
				case 192:
				{
					currTokenType = TOKEN_STAR;
					return;
				}
				case 646:
					break;
				case 53:
				{
					currTokenType = TOKEN_ROOM;
					return;
				}
				case 647:
					break;
				case 605:
				{
					currTokenType = TOKEN_HIST_PREV;
					return;
				}
				case 648:
					break;
				case 315:
				{
					currTokenType = TOKEN_DELG;
					return;
				}
				case 649:
					break;
				case 186:
				{
					currTokenType = TOKEN_SNDE;
					return;
				}
				case 650:
					break;
				case 573:
				{
					currTokenType = TOKEN_PAT_GRPH;
					return;
				}
				case 651:
					break;
				case 578:
				{
					currTokenType = TOKEN_FILE_OOPE;
					return;
				}
				case 652:
					break;
				case 151:
				{
					currTokenType = TOKEN_MVTO;
					return;
				}
				case 653:
					break;
				case 582:
				{
					currTokenType = TOKEN_FILE_IOPE;
					return;
				}
				case 654:
					break;
				case 339:
				{
					currTokenType = TOKEN_CABP;
					return;
				}
				case 655:
					break;
				case 171:
				{
					currTokenType = TOKEN_MOPY;
					return;
				}
				case 656:
					break;
				case 91:
				{
					currTokenType = TOKEN_TYPE;
					return;
				}
				case 657:
					break;
				case 524:
				{
					currTokenType = TOKEN_GIDS_SPCS;
					return;
				}
				case 658:
					break;
				case 521:
				{
					currTokenType = TOKEN_GENE_CLON;
					return;
				}
				case 659:
					break;
				case 221:
				{
					currTokenType = TOKEN_SPNL;
					return;
				}
				case 660:
					break;
				case 73:
				{
					currTokenType = TOKEN_TTAR;
					return;
				}
				case 661:
					break;
				case 147:
				{
					currTokenType = TOKEN_MTOC;
					return;
				}
				case 662:
					break;
				case 405:
				{
					currTokenType = TOKEN_FVEL;
					return;
				}
				case 663:
					break;
				case 208:
				{
					currTokenType = TOKEN_SETA;
					return;
				}
				case 664:
					break;
				case 49:
				{
					currTokenType = TOKEN_RAND;
					return;
				}
				case 665:
					break;
				case 343:
				{
					currTokenType = TOKEN_CALL;
					return;
				}
				case 666:
					break;
				case 177:
				{
					currTokenType = TOKEN_META;
					return;
				}
				case 667:
					break;
				case 92:
				{
					currTokenType = TOKEN_VTOS;
					return;
				}
				case 668:
					break;
				case 122:
				{
					currTokenType = TOKEN_ALPH;
					return;
				}
				case 669:
					break;
				case 419:
				{
					currTokenType = TOKEN_HOTS;
					return;
				}
				case 670:
					break;
				case 589:
				{
					currTokenType = TOKEN_HIST_TAGE;
					return;
				}
				case 671:
					break;
				case 472:
				{
					currTokenType = TOKEN_NET_ULIN;
					return;
				}
				case 672:
					break;
				case 153:
				{
					currTokenType = TOKEN_MVBY;
					return;
				}
				case 673:
					break;
				case 482:
				{
					currTokenType = TOKEN_NET_WHAT;
					return;
				}
				case 674:
					break;
				case 291:
				{
					currTokenType = TOKEN_LINE;
					return;
				}
				case 675:
					break;
				case 453:
				{
					currTokenType = TOKEN_ZOOM;
					return;
				}
				case 676:
					break;
				case 598:
				{
					currTokenType = TOKEN_HIST_GNUS;
					return;
				}
				case 677:
					break;
				case 145:
				{
					currTokenType = TOKEN_OWNR;
					return;
				}
				case 678:
					break;
				case 113:
				{
					currTokenType = TOKEN_AVEL;
					return;
				}
				case 679:
					break;
				case 206:
				{
					currTokenType = TOKEN_SUBS;
					return;
				}
				case 680:
					break;
				case 15:
					// lookahead expression with fixed lookahead length
					yypushback(1);
					{
						currTokenType = COMMENT;
						return;
					}
				case 681:
					break;
				case 24:
					// lookahead expression with fixed lookahead length
					yypushback(2);
					{
						currTokenType = COMMENT;
						return;
					}
				case 682:
					break;
				case 326:
				{
					currTokenType = TOKEN_CREA;
					return;
				}
				case 683:
					break;
				case 183:
				{
					currTokenType = TOKEN_MIDI;
					return;
				}
				case 684:
					break;
				case 134:
				{
					currTokenType = TOKEN_ORRV;
					return;
				}
				case 685:
					break;
				case 139:
				{
					currTokenType = TOKEN_OVER;
					return;
				}
				case 686:
					break;
				case 112:
				{
					currTokenType = TOKEN_AVAR;
					return;
				}
				case 687:
					break;
				case 135:
				{
					currTokenType = TOKEN_ORGN;
					return;
				}
				case 688:
					break;
				case 12:
				{
					currTokenType = LITERAL_STRING;
					yybegin(YYINITIAL);
					return;
				}
				case 689:
					break;
				case 438:
				{
					currTokenType = TOKEN_WALL;
					return;
				}
				case 690:
					break;
				case 389:
				{
					currTokenType = TOKEN_INNF;
					return;
				}
				case 691:
					break;
				case 528:
				{
					currTokenType = TOKEN_DBG_TOCK;
					return;
				}
				case 692:
					break;
				case 136:
				{
					currTokenType = TOKEN_ORGI;
					return;
				}
				case 693:
					break;
				case 190:
				{
					currTokenType = TOKEN_STRL;
					return;
				}
				case 694:
					break;
				case 525:
				{
					currTokenType = TOKEN_GIDS_GNUS;
					return;
				}
				case 695:
					break;
				case 346:
				{
					currTokenType = TOKEN_CORE;
					return;
				}
				case 696:
					break;
				case 608:
				{
					currTokenType = TOKEN_HIST_FIND;
					return;
				}
				case 697:
					break;
				case 530:
				{
					currTokenType = TOKEN_DBG_OUTV;
					return;
				}
				case 698:
					break;
				case 610:
				{
					currTokenType = TOKEN_HIST_WTIK;
					return;
				}
				case 699:
					break;
				case 502:
				{
					currTokenType = TOKEN_SWAY_TACT;
					return;
				}
				case 700:
					break;
				case 362:
				{
					currTokenType = TOKEN_PNTR;
					return;
				}
				case 701:
					break;
				case 399:
				{
					currTokenType = TOKEN_FROM;
					return;
				}
				case 702:
					break;
				case 215:
				{
					currTokenType = TOKEN_SLOW;
					return;
				}
				case 703:
					break;
				case 238:
				{
					currTokenType = TOKEN_BVAR;
					return;
				}
				case 704:
					break;
				case 25:
				{
					currTokenType = LITERAL_CHAR;
					return;
				}
				case 705:
					break;
				case 268:
				{
					currTokenType = TOKEN_ETIK;
					return;
				}
				case 706:
					break;
				case 11:
				{
					stringLiteral.append(yytext());
				}
				case 707:
					break;
				case 375:
				{
					currTokenType = TOKEN_POSL;
					return;
				}
				case 708:
					break;
				case 568:
				{
					currTokenType = TOKEN_PRAY_FILE;
					return;
				}
				case 709:
					break;
				case 484:
				{
					currTokenType = TOKEN_NET_WHOD;
					return;
				}
				case 710:
					break;
				case 380:
				{
					currTokenType = TOKEN_PUPT;
					return;
				}
				case 711:
					break;
				case 124:
				{
					currTokenType = TOKEN_ADDR;
					return;
				}
				case 712:
					break;
				case 577:
				{
					currTokenType = TOKEN_PAT_KILL;
					return;
				}
				case 713:
					break;
				case 129:
				{
					currTokenType = TOKEN_ADIN;
					return;
				}
				case 714:
					break;
				case 21:
				{
					stringLiteral.append('\n');
				}
				case 715:
					break;
				case 156:
				{
					currTokenType = TOKEN_MATE;
					return;
				}
				case 716:
					break;
				case 317:
				{
					currTokenType = TOKEN_DELW;
					return;
				}
				case 717:
					break;
				case 283:
				{
					currTokenType = TOKEN_LORP;
					return;
				}
				case 718:
					break;
				case 545:
				{
					currTokenType = TOKEN_PRT_BANG;
					return;
				}
				case 719:
					break;
				case 552:
				{
					currTokenType = TOKEN_PRT_JOIN;
					return;
				}
				case 720:
					break;
				case 161:
				{
					currTokenType = TOKEN_MAPK;
					return;
				}
				case 721:
					break;
				case 207:
				{
					currTokenType = TOKEN_SETV;
					return;
				}
				case 722:
					break;
				case 94:
				{
					currTokenType = TOKEN_VARC;
					return;
				}
				case 723:
					break;
				case 126:
				{
					currTokenType = TOKEN_ADDM;
					return;
				}
				case 724:
					break;
				case 47:
				{
					currTokenType = TOKEN_RTIF;
					return;
				}
				case 725:
					break;
				case 307:
				{
					currTokenType = TOKEN_DMAP;
					return;
				}
				case 726:
					break;
				case 30:
				{
					currTokenType = TOKEN_IT;
					return;
				}
				case 727:
					break;
				case 512:
				{
					currTokenType = TOKEN_BRN_SETL;
					return;
				}
				case 728:
					break;
				case 42:
				{
					currTokenType = TOKEN_NPGS;
					return;
				}
				case 729:
					break;
				case 265:
				{
					currTokenType = TOKEN_ENDI;
					return;
				}
				case 730:
					break;
				case 273:
				{
					currTokenType = TOKEN_EMID;
					return;
				}
				case 731:
					break;
				case 223:
				{
					currTokenType = TOKEN_SPCS;
					return;
				}
				case 732:
					break;
				case 197:
				{
					currTokenType = TOKEN_STPT;
					return;
				}
				case 733:
					break;
				case 463:
				{
					currTokenType = TOKEN_CD_FRQM;
					return;
				}
				case 734:
					break;
				case 230:
				{
					currTokenType = TOKEN_UNCS;
					return;
				}
				case 735:
					break;
				case 435:
				{
					currTokenType = TOKEN_WRLD;
					return;
				}
				case 736:
					break;
				case 301:
				{
					currTokenType = TOKEN_DONE;
					return;
				}
				case 737:
					break;
				case 118:
				{
					currTokenType = TOKEN_AGNT;
					return;
				}
				case 738:
					break;
				case 587:
				{
					currTokenType = TOKEN_HIST_NEXT;
					return;
				}
				case 739:
					break;
				case 29:
				{
					currTokenType = TOKEN_P2;
					return;
				}
				case 740:
					break;
				case 211:
				{
					currTokenType = TOKEN_SEEN;
					return;
				}
				case 741:
					break;
				case 499:
				{
					currTokenType = TOKEN_STIM_SIGN;
					return;
				}
				case 742:
					break;
				case 311:
				{
					currTokenType = TOKEN_DEAD;
					return;
				}
				case 743:
					break;
				case 465:
				{
					currTokenType = TOKEN_CD_FRQH;
					return;
				}
				case 744:
					break;
				case 128:
				{
					currTokenType = TOKEN_ADDB;
					return;
				}
				case 745:
					break;
				case 586:
				{
					currTokenType = TOKEN_HIST_NETU;
					return;
				}
				case 746:
					break;
				case 537:
				{
					currTokenType = TOKEN_DBG_FLSH;
					return;
				}
				case 747:
					break;
				case 14:
				{
					currTokenType = TOKEN_NE;
					return;
				}
				case 748:
					break;
				case 70:
				{
					currTokenType = TOKEN_TNTW;
					return;
				}
				case 749:
					break;
				case 243:
				{
					currTokenType = TOKEN_BODY;
					return;
				}
				case 750:
					break;
				case 335:
				{
					currTokenType = TOKEN_CABT;
					return;
				}
				case 751:
					break;
				case 282:
				{
					currTokenType = TOKEN_LTCY;
					return;
				}
				case 752:
					break;
				case 299:
				{
					currTokenType = TOKEN_DATE;
					return;
				}
				case 753:
					break;
				case 155:
				{
					currTokenType = TOKEN_MANN;
					return;
				}
				case 754:
					break;
				case 163:
				{
					currTokenType = TOKEN_MOTR;
					return;
				}
				case 755:
					break;
				case 385:
				{
					currTokenType = TOKEN_PLMD;
					return;
				}
				case 756:
					break;
				case 461:
				{
					currTokenType = TOKEN_CD_PLAY;
					return;
				}
				case 757:
					break;
				case 76:
				{
					currTokenType = TOKEN_TAGE;
					return;
				}
				case 758:
					break;
				case 170:
				{
					currTokenType = TOKEN_MOPX;
					return;
				}
				case 759:
					break;
				case 409:
				{
					currTokenType = TOKEN_FACE;
					return;
				}
				case 760:
					break;
				case 261:
				{
					currTokenType = TOKEN_GMAP;
					return;
				}
				case 761:
					break;
				case 244:
				{
					currTokenType = TOKEN_BUZZ;
					return;
				}
				case 762:
					break;
				case 43:
				{
					currTokenType = TOKEN_NWLD;
					return;
				}
				case 763:
					break;
				case 61:
				{
					currTokenType = TOKEN_READ;
					return;
				}
				case 764:
					break;
				case 199:
				{
					currTokenType = TOKEN_SVEL;
					return;
				}
				case 765:
					break;
				case 562:
				{
					currTokenType = TOKEN_PRAY_DEPS;
					return;
				}
				case 766:
					break;
				case 250:
				{
					currTokenType = TOKEN_GNUS;
					return;
				}
				case 767:
					break;
				case 77:
				{
					currTokenType = TOKEN_TACK;
					return;
				}
				case 768:
					break;
				case 395:
				{
					currTokenType = TOKEN_IMSK;
					return;
				}
				case 769:
					break;
				case 538:
				{
					currTokenType = TOKEN_DBG_HTML;
					return;
				}
				case 770:
					break;
				case 596:
				{
					currTokenType = TOKEN_HIST_SEAN;
					return;
				}
				case 771:
					break;
				case 178:
				{
					currTokenType = TOKEN_MEMX;
					return;
				}
				case 772:
					break;
				case 481:
				{
					currTokenType = TOKEN_NET_WRIT;
					return;
				}
				case 773:
					break;
				case 142:
				{
					currTokenType = TOKEN_OUTS;
					return;
				}
				case 774:
					break;
				case 37:
				{
					currTokenType = TOKEN_NUDE;
					return;
				}
				case 775:
					break;
				case 38:
				{
					currTokenType = TOKEN_NEGV;
					return;
				}
				case 776:
					break;
				case 86:
				{
					currTokenType = TOKEN_TINT;
					return;
				}
				case 777:
					break;
				case 184:
				{
					currTokenType = TOKEN_SNAP;
					return;
				}
				case 778:
					break;
				case 418:
				{
					currTokenType = TOKEN_HAIR;
					return;
				}
				case 779:
					break;
				case 327:
				{
					currTokenType = TOKEN_CARR;
					return;
				}
				case 780:
					break;
				case 581:
				{
					currTokenType = TOKEN_FILE_GLOB;
					return;
				}
				case 781:
					break;
				case 167:
				{
					currTokenType = TOKEN_MOUS;
					return;
				}
				case 782:
					break;
				case 383:
				{
					currTokenType = TOKEN_PLNE;
					return;
				}
				case 783:
					break;
				case 370:
				{
					currTokenType = TOKEN_PAWS;
					return;
				}
				case 784:
					break;
				case 82:
				{
					currTokenType = TOKEN_TMVT;
					return;
				}
				case 785:
					break;
				case 87:
				{
					currTokenType = TOKEN_TINO;
					return;
				}
				case 786:
					break;
				case 543:
				{
					currTokenType = TOKEN_PRT_OZAP;
					return;
				}
				case 787:
					break;
				case 430:
				{
					currTokenType = TOKEN_WNDT;
					return;
				}
				case 788:
					break;
				case 50:
				{
					currTokenType = TOKEN_RATE;
					return;
				}
				case 789:
					break;
				case 272:
				{
					currTokenType = TOKEN_EMIT;
					return;
				}
				case 790:
					break;
				case 19:
				{
					stringLiteral.append('"');
				}
				case 791:
					break;
				case 548:
				{
					currTokenType = TOKEN_PRT_IZAP;
					return;
				}
				case 792:
					break;
				case 437:
				{
					currTokenType = TOKEN_WTIK;
					return;
				}
				case 793:
					break;
				case 341:
				{
					currTokenType = TOKEN_CAGE;
					return;
				}
				case 794:
					break;
				case 198:
				{
					currTokenType = TOKEN_STPC;
					return;
				}
				case 795:
					break;
				case 144:
				{
					currTokenType = TOKEN_OBST;
					return;
				}
				case 796:
					break;
				case 554:
				{
					currTokenType = TOKEN_PRAY_REFR;
					return;
				}
				case 797:
					break;
				case 540:
				{
					currTokenType = TOKEN_PRT_NAME;
					return;
				}
				case 798:
					break;
				case 439:
				{
					currTokenType = TOKEN_WALK;
					return;
				}
				case 799:
					break;
				case 478:
				{
					currTokenType = TOKEN_NET_HOST;
					return;
				}
				case 800:
					break;
				case 503:
				{
					currTokenType = TOKEN_SWAY_SIGN;
					return;
				}
				case 801:
					break;
				case 228:
				{
					currTokenType = TOKEN_UNTL;
					return;
				}
				case 802:
					break;
				case 368:
				{
					currTokenType = TOKEN_PAGE;
					return;
				}
				case 803:
					break;
				case 231:
				{
					currTokenType = TOKEN_UNID;
					return;
				}
				case 804:
					break;
				case 181:
				{
					currTokenType = TOKEN_MIND;
					return;
				}
				case 805:
					break;
				case 191:
				{
					currTokenType = TOKEN_STRK;
					return;
				}
				case 806:
					break;
				case 509:
				{
					currTokenType = TOKEN_URGE_WRIT;
					return;
				}
				case 807:
					break;
				case 133:
				{
					currTokenType = TOKEN_APPR;
					return;
				}
				case 808:
					break;
				case 479:
				{
					currTokenType = TOKEN_NET_HEAR;
					return;
				}
				case 809:
					break;
				case 276:
				{
					currTokenType = TOKEN_ELSE;
					return;
				}
				case 810:
					break;
				case 390:
				{
					currTokenType = TOKEN_INOK;
					return;
				}
				case 811:
					break;
				case 321:
				{
					currTokenType = TOKEN_DIRN;
					return;
				}
				case 812:
					break;
				case 451:
				{
					currTokenType = TOKEN_KILL;
					return;
				}
				case 813:
					break;
				case 248:
				{
					currTokenType = TOKEN_BKDS;
					return;
				}
				case 814:
					break;
				case 494:
				{
					currTokenType = TOKEN_ORDR_SHOU;
					return;
				}
				case 815:
					break;
				case 7:
				{
					currTokenType = BYTEARRAYLITERAL_CLOSE;
					return;
				}
				case 816:
					break;
				case 308:
				{
					currTokenType = TOKEN_DSEE;
					return;
				}
				case 817:
					break;
				case 506:
				{
					currTokenType = TOKEN_URGE_TACT;
					return;
				}
				case 818:
					break;
				case 570:
				{
					currTokenType = TOKEN_PAT_TEXT;
					return;
				}
				case 819:
					break;
				case 237:
				{
					currTokenType = TOKEN_BRMI;
					return;
				}
				case 820:
					break;
				case 96:
				{
					currTokenType = TOKEN_VOCB;
					return;
				}
				case 821:
					break;
				case 106:
				{
					currTokenType = TOKEN_ANGL;
					return;
				}
				case 822:
					break;
				case 556:
				{
					currTokenType = TOKEN_PRAY_AGTS;
					return;
				}
				case 823:
					break;
				case 105:
				{
					currTokenType = TOKEN_ANMS;
					return;
				}
				case 824:
					break;
				case 329:
				{
					currTokenType = TOKEN_CATO;
					return;
				}
				case 825:
					break;
				case 457:
				{
					currTokenType = TOKEN_CD_STOP;
					return;
				}
				case 826:
					break;
				case 369:
				{
					currTokenType = TOKEN_PACE;
					return;
				}
				case 827:
					break;
				case 357:
				{
					currTokenType = TOKEN_CMRY;
					return;
				}
				case 828:
					break;
				case 274:
				{
					currTokenType = TOKEN_ESEE;
					return;
				}
				case 829:
					break;
				case 294:
				{
					currTokenType = TOKEN_LIKE;
					return;
				}
				case 830:
					break;
				case 81:
				{
					currTokenType = TOKEN_TOUC;
					return;
				}
				case 831:
					break;
				case 353:
				{
					currTokenType = TOKEN_CMRT;
					return;
				}
				case 832:
					break;
				case 290:
				{
					currTokenType = TOKEN_LEFT;
					return;
				}
				case 833:
					break;
				case 254:
				{
					currTokenType = TOKEN_GRID;
					return;
				}
				case 834:
					break;
				case 520:
				{
					currTokenType = TOKEN_GENE_CROS;
					return;
				}
				case 835:
					break;
				case 196:
				{
					currTokenType = TOKEN_STEP;
					return;
				}
				case 836:
					break;
				case 251:
				{
					currTokenType = TOKEN_GRAP;
					return;
				}
				case 837:
					break;
				case 245:
				{
					currTokenType = TOKEN_BHVR;
					return;
				}
				case 838:
					break;
				case 218:
				{
					currTokenType = TOKEN_SCRX;
					return;
				}
				case 839:
					break;
				case 110:
				{
					currTokenType = TOKEN_ATTR;
					return;
				}
				case 840:
					break;
				case 612:
				{
					currTokenType = TOKEN_HIST_WUID;
					return;
				}
				case 841:
					break;
				case 464:
				{
					currTokenType = TOKEN_CD_FRQL;
					return;
				}
				case 842:
					break;
				case 515:
				{
					currTokenType = TOKEN_BRN_DMPB;
					return;
				}
				case 843:
					break;
				case 330:
				{
					currTokenType = TOKEN_CATI;
					return;
				}
				case 844:
					break;
				case 59:
				{
					currTokenType = TOKEN_REAN;
					return;
				}
				case 845:
					break;
				case 40:
				{
					currTokenType = TOKEN_NEWC;
					return;
				}
				case 846:
					break;
				case 392:
				{
					currTokenType = TOKEN_INS;
					return;
				}
				case 847:
					break;
				case 400:
				{
					currTokenType = TOKEN_FRMT;
					return;
				}
				case 848:
					break;
				case 28:
				{
					currTokenType = TOKEN_P1;
					return;
				}
				case 849:
					break;
				case 132:
				{
					currTokenType = TOKEN_APRO;
					return;
				}
				case 850:
					break;
				case 263:
				{
					currTokenType = TOKEN_ENUM;
					return;
				}
				case 851:
					break;
				case 51:
				{
					currTokenType = TOKEN_RACE;
					return;
				}
				case 852:
					break;
				case 382:
				{
					currTokenType = TOKEN_PERM;
					return;
				}
				case 853:
					break;
				case 143:
				{
					currTokenType = TOKEN_OUTX;
					return;
				}
				case 854:
					break;
				case 447:
				{
					currTokenType = TOKEN_WPAU;
					return;
				}
				case 855:
					break;
				case 210:
				{
					currTokenType = TOKEN_SEAN;
					return;
				}
				case 856:
					break;
				case 566:
				{
					currTokenType = TOKEN_PRAY_IMPO;
					return;
				}
				case 857:
					break;
				case 285:
				{
					currTokenType = TOKEN_LOOP;
					return;
				}
				case 858:
					break;
				case 95:
				{
					currTokenType = TOKEN_VOLM;
					return;
				}
				case 859:
					break;
				case 119:
				{
					currTokenType = TOKEN_AGES;
					return;
				}
				case 860:
					break;
				case 614:
				{
					currTokenType = TOKEN_HIST_YEAR;
					return;
				}
				case 861:
					break;
				case 35:
				{
					currTokenType = TOKEN_NOHH;
					return;
				}
				case 862:
					break;
				case 66:
				{
					currTokenType = TOKEN_REPE;
					return;
				}
				case 863:
					break;
				case 316:
				{
					currTokenType = TOKEN_DELE;
					return;
				}
				case 864:
					break;
				case 188:
				{
					currTokenType = TOKEN_SNDC;
					return;
				}
				case 865:
					break;
				case 333:
				{
					currTokenType = TOKEN_CABN;
					return;
				}
				case 866:
					break;
				case 293:
				{
					currTokenType = TOKEN_LIMB;
					return;
				}
				case 867:
					break;
				case 149:
				{
					currTokenType = TOKEN_MTHY;
					return;
				}
				case 868:
					break;
				case 483:
				{
					currTokenType = TOKEN_NET_WHON;
					return;
				}
				case 869:
					break;
				case 152:
				{
					currTokenType = TOKEN_MVSF;
					return;
				}
				case 870:
					break;
				case 607:
				{
					currTokenType = TOKEN_HIST_FINR;
					return;
				}
				case 871:
					break;
				case 34:
				{
					currTokenType = TOKEN_NOTV;
					return;
				}
				case 872:
					break;
				case 75:
				{
					currTokenType = TOKEN_TARG;
					return;
				}
				case 873:
					break;
				case 146:
				{
					currTokenType = TOKEN_MTOA;
					return;
				}
				case 874:
					break;
				case 13:
				{
					stringLiteral.append(yycharat(0));
				}
				case 875:
					break;
				case 348:
				{
					currTokenType = TOKEN_CODS;
					return;
				}
				case 876:
					break;
				case 469:
				{
					currTokenType = TOKEN_NET_STAT;
					return;
				}
				case 877:
					break;
				case 166:
				{
					currTokenType = TOKEN_MOVY;
					return;
				}
				case 878:
					break;
				case 347:
				{
					currTokenType = TOKEN_COS;
					return;
				}
				case 879:
					break;
				case 576:
				{
					currTokenType = TOKEN_PAT_FIXD;
					return;
				}
				case 880:
					break;
				case 379:
				{
					currTokenType = TOKEN_PURE;
					return;
				}
				case 881:
					break;
				case 278:
				{
					currTokenType = TOKEN_ECON;
					return;
				}
				case 882:
					break;
				case 80:
				{
					currTokenType = TOKEN_TOTL;
					return;
				}
				case 883:
					break;
				case 267:
				{
					currTokenType = TOKEN_ETCH;
					return;
				}
				case 884:
					break;
				case 266:
				{
					currTokenType = TOKEN_ERID;
					return;
				}
				case 885:
					break;
				case 388:
				{
					currTokenType = TOKEN_INNI;
					return;
				}
				case 886:
					break;
				case 495:
				{
					currTokenType = TOKEN_ORDR_WRIT;
					return;
				}
				case 887:
					break;
				case 424:
				{
					currTokenType = TOKEN_HELP;
					return;
				}
				case 888:
					break;
				case 125:
				{
					currTokenType = TOKEN_ADDV;
					return;
				}
				case 889:
					break;
				case 394:
				{
					currTokenType = TOKEN_ITOF;
					return;
				}
				case 890:
					break;
				case 585:
				{
					currTokenType = TOKEN_HIST_NAME;
					return;
				}
				case 891:
					break;
				case 138:
				{
					currTokenType = NUMVAR_OV;
					return;
				}
				case 892:
					break;
				case 164:
				{
					currTokenType = TOKEN_MOVS;
					return;
				}
				case 893:
					break;
				case 239:
				{
					currTokenType = TOKEN_BANG;
					return;
				}
				case 894:
					break;
				case 613:
				{
					currTokenType = TOKEN_HIST_WIPE;
					return;
				}
				case 895:
					break;
				case 130:
				{
					currTokenType = TOKEN_ACOS;
					return;
				}
				case 896:
					break;
				case 304:
				{
					currTokenType = TOKEN_DOIN;
					return;
				}
				case 897:
					break;
				case 332:
				{
					currTokenType = TOKEN_CAOS;
					return;
				}
				case 898:
					break;
				case 550:
				{
					currTokenType = TOKEN_PRT_FRMA;
					return;
				}
				case 899:
					break;
				case 284:
				{
					currTokenType = TOKEN_LOAD;
					return;
				}
				case 900:
					break;
				case 39:
				{
					currTokenType = TOKEN_NEXT;
					return;
				}
				case 901:
					break;
				case 459:
				{
					currTokenType = TOKEN_CD_EJCT;
					return;
				}
				case 902:
					break;
				case 396:
				{
					currTokenType = TOKEN_ISCR;
					return;
				}
				case 903:
					break;
				case 433:
				{
					currTokenType = TOKEN_WNDH;
					return;
				}
				case 904:
					break;
				case 264:
				{
					currTokenType = TOKEN_ENDM;
					return;
				}
				case 905:
					break;
				case 516:
				{
					currTokenType = TOKEN_BRN_DMPL;
					return;
				}
				case 906:
					break;
				case 20:
				{
					stringLiteral.append('\\');
				}
				case 907:
					break;
				case 79:
				{
					currTokenType = TOKEN_TORY;
					return;
				}
				case 908:
					break;
				case 374:
				{
					currTokenType = TOKEN_POSE;
					return;
				}
				case 909:
					break;
				case 115:
				{
					currTokenType = TOKEN_ASIN;
					return;
				}
				case 910:
					break;
				case 600:
				{
					currTokenType = TOKEN_HIST_EVNT;
					return;
				}
				case 911:
					break;
				case 17:
				{
					currTokenType = TOKEN_GE;
					return;
				}
				case 912:
					break;
				case 361:
				{
					currTokenType = TOKEN_CHEM;
					return;
				}
				case 913:
					break;
				case 300:
				{
					currTokenType = TOKEN_DAYT;
					return;
				}
				case 914:
					break;
				case 356:
				{
					currTokenType = TOKEN_CMRX;
					return;
				}
				case 915:
					break;
				case 518:
				{
					currTokenType = TOKEN_GENE_MOVE;
					return;
				}
				case 916:
					break;
				case 442:
				{
					currTokenType = TOKEN_WUID;
					return;
				}
				case 917:
					break;
				case 303:
				{
					currTokenType = TOKEN_DOCA;
					return;
				}
				case 918:
					break;
				case 158:
				{
					currTokenType = TOKEN_MAPD;
					return;
				}
				case 919:
					break;
				case 104:
				{
					currTokenType = TOKEN_VISI;
					return;
				}
				case 920:
					break;
				case 358:
				{
					currTokenType = TOKEN_CLAC;
					return;
				}
				case 921:
					break;
				case 98:
				{
					currTokenType = TOKEN_VOIC;
					return;
				}
				case 922:
					break;
				case 219:
				{
					currTokenType = TOKEN_SCAM;
					return;
				}
				case 923:
					break;
				case 611:
				{
					currTokenType = TOKEN_HIST_WVET;
					return;
				}
				case 924:
					break;
				case 22:
				{
					stringLiteral.append('\r');
				}
				case 925:
					break;
				case 162:
				{
					currTokenType = TOKEN_MONT;
					return;
				}
				case 926:
					break;
				case 214:
				{
					currTokenType = TOKEN_SQRT;
					return;
				}
				case 927:
					break;
				case 431:
				{
					currTokenType = TOKEN_WNDB;
					return;
				}
				case 928:
					break;
				case 253:
				{
					currTokenType = TOKEN_GRPL;
					return;
				}
				case 929:
					break;
				case 467:
				{
					currTokenType = TOKEN_NET_RUSO;
					return;
				}
				case 930:
					break;
				case 271:
				{
					currTokenType = TOKEN_EAME;
					return;
				}
				case 931:
					break;
				case 33:
				{
					currTokenType = TOKEN_NORN;
					return;
				}
				case 932:
					break;
				case 1:
				{
					throw TextSyntaxCheckedException.inst("Syntax error at line " + (yyline + 1) + ", col " + (yycolumn + 1));
				}
				case 933:
					break;
				case 241:
				{
					currTokenType = TOKEN_BORN;
					return;
				}
				case 934:
					break;
				case 226:
				{
					currTokenType = TOKEN_SINS;
					return;
				}
				case 935:
					break;
				case 3:
				{
					currTokenType = LITERAL_DECIMAL;
					return;
				}
				case 936:
					break;
				case 195:
				{
					currTokenType = TOKEN_STOF;
					return;
				}
				case 937:
					break;
				case 108:
				{
					currTokenType = TOKEN_ANIM;
					return;
				}
				case 938:
					break;
				case 55:
				{
					currTokenType = TOKEN_RSCR;
					return;
				}
				case 939:
					break;
				case 574:
				{
					currTokenType = TOKEN_PAT_DULL;
					return;
				}
				case 940:
					break;
				case 364:
				{
					currTokenType = TOKEN_PROP;
					return;
				}
				case 941:
					break;
				case 488:
				{
					currTokenType = TOKEN_NEW_SIMP;
					return;
				}
				case 942:
					break;
				case 203:
				{
					currTokenType = TOKEN_SORC;
					return;
				}
				case 943:
					break;
				case 391:
				{
					currTokenType = TOKEN_INST;
					return;
				}
				case 944:
					break;
				case 224:
				{
					currTokenType = TOKEN_SPIN;
					return;
				}
				case 945:
					break;
				case 296:
				{
					currTokenType = TOKEN_DROP;
					return;
				}
				case 946:
					break;
				case 542:
				{
					currTokenType = TOKEN_PRT_OTOT;
					return;
				}
				case 947:
					break;
				case 233:
				{
					currTokenType = TOKEN_UPPA;
					return;
				}
				case 948:
					break;
				case 547:
				{
					currTokenType = TOKEN_PRT_ITOT;
					return;
				}
				case 949:
					break;
				case 458:
				{
					currTokenType = TOKEN_CD_SHUT;
					return;
				}
				case 950:
					break;
				case 89:
				{
					currTokenType = TOKEN_TICK;
					return;
				}
				case 951:
					break;
				case 523:
				{
					currTokenType = TOKEN_GIDS_ROOT;
					return;
				}
				case 952:
					break;
				case 157:
				{
					currTokenType = TOKEN_MAME;
					return;
				}
				case 953:
					break;
				case 236:
				{
					currTokenType = TOKEN_UFOS;
					return;
				}
				case 954:
					break;
				case 415:
				{
					currTokenType = TOKEN_FDMP;
					return;
				}
				case 955:
					break;
				case 56:
				{
					currTokenType = TOKEN_RGAM;
					return;
				}
				case 956:
					break;
				case 148:
				{
					currTokenType = TOKEN_MTHX;
					return;
				}
				case 957:
					break;
				case 257:
				{
					currTokenType = TOKEN_GAME;
					return;
				}
				case 958:
					break;
				case 205:
				{
					currTokenType = TOKEN_SUBV;
					return;
				}
				case 959:
					break;
				case 606:
				{
					currTokenType = TOKEN_HIST_FOTO;
					return;
				}
				case 960:
					break;
				case 541:
				{
					currTokenType = TOKEN_PRT_ONEW;
					return;
				}
				case 961:
					break;
				case 280:
				{
					currTokenType = TOKEN_EXPR;
					return;
				}
				case 962:
					break;
				case 408:
				{
					currTokenType = TOKEN_FADE;
					return;
				}
				case 963:
					break;
				case 546:
				{
					currTokenType = TOKEN_PRT_INEW;
					return;
				}
				case 964:
					break;
				case 325:
				{
					currTokenType = TOKEN_DFTY;
					return;
				}
				case 965:
					break;
				case 281:
				{
					currTokenType = TOKEN_QUIT;
					return;
				}
				case 966:
					break;
				case 466:
				{
					currTokenType = TOKEN_NET_RAWE;
					return;
				}
				case 967:
					break;
				case 165:
				{
					currTokenType = TOKEN_MOVX;
					return;
				}
				case 968:
					break;
				case 434:
				{
					currTokenType = TOKEN_WNDW;
					return;
				}
				case 969:
					break;
				case 97:
				{
					currTokenType = TOKEN_VOIS;
					return;
				}
				case 970:
					break;
				case 225:
				{
					currTokenType = TOKEN_SIN;
					return;
				}
				case 971:
					break;
				case 201:
				{
					currTokenType = TOKEN_SAYN;
					return;
				}
				case 972:
					break;
				case 32:
				{
					currTokenType = TOKEN_NAME;
					return;
				}
				case 973:
					break;
				case 420:
				{
					currTokenType = TOKEN_HOTP;
					return;
				}
				case 974:
					break;
				case 575:
				{
					currTokenType = TOKEN_PAT_CMRA;
					return;
				}
				case 975:
					break;
				case 372:
				{
					currTokenType = TOKEN_POST;
					return;
				}
				case 976:
					break;
				case 242:
				{
					currTokenType = TOKEN_BOOT;
					return;
				}
				case 977:
					break;
				case 471:
				{
					currTokenType = TOKEN_NET_USER;
					return;
				}
				case 978:
					break;
				case 306:
				{
					currTokenType = TOKEN_DOWN;
					return;
				}
				case 979:
					break;
				case 491:
				{
					currTokenType = TOKEN_NEW_COMP;
					return;
				}
				case 980:
					break;
				case 123:
				{
					currTokenType = TOKEN_ADMP;
					return;
				}
				case 981:
					break;
				case 429:
				{
					currTokenType = TOKEN_WNDR;
					return;
				}
				case 982:
					break;
				case 204:
				{
					currTokenType = TOKEN_SOUL;
					return;
				}
				case 983:
					break;
				case 492:
				{
					currTokenType = TOKEN_ORDR_TACT;
					return;
				}
				case 984:
					break;
				case 558:
				{
					currTokenType = TOKEN_PRAY_MAKE;
					return;
				}
				case 985:
					break;
				case 595:
				{
					currTokenType = TOKEN_HIST_MUTE;
					return;
				}
				case 986:
					break;
				case 507:
				{
					currTokenType = TOKEN_URGE_SIGN;
					return;
				}
				case 987:
					break;
				case 563:
				{
					currTokenType = TOKEN_PRAY_COUN;
					return;
				}
				case 988:
					break;
				case 331:
				{
					currTokenType = TOKEN_CATX;
					return;
				}
				case 989:
					break;
				case 441:
				{
					currTokenType = TOKEN_WOLF;
					return;
				}
				case 990:
					break;
				case 246:
				{
					currTokenType = TOKEN_BYIT;
					return;
				}
				case 991:
					break;
				case 337:
				{
					currTokenType = TOKEN_CABB;
					return;
				}
				case 992:
					break;
				case 137:
				{
					currTokenType = TOKEN_ORGF;
					return;
				}
				case 993:
					break;
				case 527:
				{
					currTokenType = TOKEN_DBG_TACK;
					return;
				}
				case 994:
					break;
				case 398:
				{
					currTokenType = TOKEN_FRAT;
					return;
				}
				case 995:
					break;
				case 44:
				{
					currTokenType = TOKEN_RNGE;
					return;
				}
				case 996:
					break;
				case 403:
				{
					currTokenType = TOKEN_FRIC;
					return;
				}
				case 997:
					break;
				case 564:
				{
					currTokenType = TOKEN_PRAY_PREV;
					return;
				}
				case 998:
					break;
				case 567:
				{
					currTokenType = TOKEN_PRAY_FORE;
					return;
				}
				case 999:
					break;
				case 590:
				{
					currTokenType = TOKEN_HIST_TIME;
					return;
				}
				case 1000:
					break;
				case 443:
				{
					currTokenType = TOKEN_WEAR;
					return;
				}
				case 1001:
					break;
				case 511:
				{
					currTokenType = TOKEN_BRN_SETT;
					return;
				}
				case 1002:
					break;
				case 531:
				{
					currTokenType = TOKEN_DBG_OUTS;
					return;
				}
				case 1003:
					break;
				case 455:
				{
					currTokenType = SUBROUTINE_SUBR;
					return;
				}
				case 1004:
					break;
				case 349:
				{
					currTokenType = TOKEN_CODG;
					return;
				}
				case 1005:
					break;
				case 275:
				{
					currTokenType = TOKEN_ELAS;
					return;
				}
				case 1006:
					break;
				case 432:
				{
					currTokenType = TOKEN_WNDL;
					return;
				}
				case 1007:
					break;
				case 397:
				{
					currTokenType = TOKEN_IITT;
					return;
				}
				case 1008:
					break;
				case 189:
				{
					currTokenType = TOKEN_SNDW;
					return;
				}
				case 1009:
					break;
				case 247:
				{
					currTokenType = TOKEN_BKGD;
					return;
				}
				case 1010:
					break;
				case 489:
				{
					currTokenType = TOKEN_NEW_CRAG;
					return;
				}
				case 1011:
					break;
				case 252:
				{
					currTokenType = TOKEN_GRPV;
					return;
				}
				case 1012:
					break;
				case 412:
				{
					currTokenType = TOKEN_FLTO;
					return;
				}
				case 1013:
					break;
				case 497:
				{
					currTokenType = TOKEN_MESG_WRIT;
					return;
				}
				case 1014:
					break;
				case 470:
				{
					currTokenType = TOKEN_NET_UNIK;
					return;
				}
				case 1015:
					break;
				case 473:
				{
					currTokenType = TOKEN_NET_ERRA;
					return;
				}
				case 1016:
					break;
				case 58:
				{
					currTokenType = TOKEN_RETN;
					return;
				}
				case 1017:
					break;
				case 85:
				{
					currTokenType = TOKEN_TCOR;
					return;
				}
				case 1018:
					break;
				case 534:
				{
					currTokenType = TOKEN_DBG_PAWS;
					return;
				}
				case 1019:
					break;
				case 18:
				{
					currTokenType = TOKEN_LE;
					return;
				}
				case 1020:
					break;
				case 78:
				{
					currTokenType = TOKEN_TORX;
					return;
				}
				case 1021:
					break;
				case 36:
				{
					currTokenType = TOKEN_NULL;
					return;
				}
				case 1022:
					break;
				case 588:
				{
					currTokenType = TOKEN_HIST_RTIM;
					return;
				}
				case 1023:
					break;
				case 101:
				{
					currTokenType = TOKEN_VELO;
					return;
				}
				case 1024:
					break;
				case 172:
				{
					currTokenType = TOKEN_MOWS;
					return;
				}
				case 1025:
					break;
				case 83:
				{
					currTokenType = TOKEN_TMVB;
					return;
				}
				case 1026:
					break;
				case 159:
				{
					currTokenType = TOKEN_MAPH;
					return;
				}
				case 1027:
					break;
				case 539:
				{
					currTokenType = TOKEN_DBG_WTIK;
					return;
				}
				case 1028:
					break;
				case 209:
				{
					currTokenType = TOKEN_SETS;
					return;
				}
				case 1029:
					break;
				case 6:
				{
					currTokenType = BYTEARRAYLITERAL_OPEN;
					return;
				}
				case 1030:
					break;
				case 423:
				{
					currTokenType = TOKEN_HELD;
					return;
				}
				case 1031:
					break;
				case 532:
				{
					currTokenType = TOKEN_DBG_CPRO;
					return;
				}
				case 1032:
					break;
				case 287:
				{
					currTokenType = TOKEN_LOCK;
					return;
				}
				case 1033:
					break;
				case 450:
				{
					currTokenType = TOKEN_KEYD;
					return;
				}
				case 1034:
					break;
				case 193:
				{
					currTokenType = TOKEN_STOP;
					return;
				}
				case 1035:
					break;
				case 360:
				{
					currTokenType = TOKEN_CHAR;
					return;
				}
				case 1036:
					break;
				case 452:
				{
					currTokenType = TOKEN_JECT;
					return;
				}
				case 1037:
					break;
				case 229:
				{
					currTokenType = TOKEN_UNLK;
					return;
				}
				case 1038:
					break;
				case 54:
				{
					currTokenType = TOKEN_RMSC;
					return;
				}
				case 1039:
					break;
				case 295:
				{
					currTokenType = TOKEN_DRV;
					return;
				}
				case 1040:
					break;
				case 594:
				{
					currTokenType = TOKEN_HIST_MON2;
					return;
				}
				case 1041:
					break;
				case 449:
				{
					currTokenType = TOKEN_YEAR;
					return;
				}
				case 1042:
					break;
				case 200:
				{
					currTokenType = TOKEN_SAVE;
					return;
				}
				case 1043:
					break;
				case 559:
				{
					currTokenType = TOKEN_PRAY_BACK;
					return;
				}
				case 1044:
					break;
				case 561:
				{
					currTokenType = TOKEN_PRAY_EXPO;
					return;
				}
				case 1045:
					break;
				case 23:
				{
					stringLiteral.append('\t');
				}
				case 1046:
					break;
				case 187:
				{
					currTokenType = TOKEN_SNDL;
					return;
				}
				case 1047:
					break;
				case 513:
				{
					currTokenType = TOKEN_BRN_SETD;
					return;
				}
				case 1048:
					break;
				case 340:
				{
					currTokenType = TOKEN_CABW;
					return;
				}
				case 1049:
					break;
				case 235:
				{
					currTokenType = TOKEN_UFTY;
					return;
				}
				case 1050:
					break;
				case 74:
				{
					currTokenType = TOKEN_TAN;
					return;
				}
				case 1051:
					break;
				case 597:
				{
					currTokenType = TOKEN_HIST_UTXT;
					return;
				}
				case 1052:
					break;
				case 71:
				{
					currTokenType = TOKEN_TRAN;
					return;
				}
				case 1053:
					break;
				case 334:
				{
					currTokenType = TOKEN_CABR;
					return;
				}
				case 1054:
					break;
				case 320:
				{
					currTokenType = TOKEN_DPAS;
					return;
				}
				case 1055:
					break;
				case 378:
				{
					currTokenType = TOKEN_PSWD;
					return;
				}
				case 1056:
					break;
				case 319:
				{
					currTokenType = TOKEN_DCOR;
					return;
				}
				case 1057:
					break;
				case 173:
				{
					currTokenType = TOKEN_MMSC;
					return;
				}
				case 1058:
					break;
				case 185:
				{
					currTokenType = TOKEN_SNAX;
					return;
				}
				case 1059:
					break;
				case 609:
				{
					currTokenType = TOKEN_HIST_WNAM;
					return;
				}
				case 1060:
					break;
				case 174:
				{
					currTokenType = TOKEN_MSEC;
					return;
				}
				case 1061:
					break;
				case 4:
				{
					currTokenType = LITERAL_BINARY;
					return;
				}
				case 1062:
					break;
				case 288:
				{
					currTokenType = TOKEN_LOFT;
					return;
				}
				case 1063:
					break;
				case 318:
				{
					currTokenType = TOKEN_DECN;
					return;
				}
				case 1064:
					break;
				case 141:
				{
					currTokenType = TOKEN_OUTV;
					return;
				}
				case 1065:
					break;
				case 602:
				{
					currTokenType = TOKEN_HIST_CROS;
					return;
				}
				case 1066:
					break;
				case 436:
				{
					currTokenType = TOKEN_WTNT;
					return;
				}
				case 1067:
					break;
				case 27:
				{
					currTokenType = TOKEN_UP;
					return;
				}
				case 1068:
					break;
				case 500:
				{
					currTokenType = TOKEN_STIM_SHOU;
					return;
				}
				case 1069:
					break;
				case 322:
				{
					currTokenType = TOKEN_DIVV;
					return;
				}
				case 1070:
					break;
				case 179:
				{
					currTokenType = TOKEN_MLOC;
					return;
				}
				case 1071:
					break;
				case 217:
				{
					currTokenType = TOKEN_SCRP;
					return;
				}
				case 1072:
					break;
				case 454:
				{
					currTokenType = TOKEN_ZOMB;
					return;
				}
				case 1073:
					break;
				case 426:
				{
					currTokenType = TOKEN_HHLD;
					return;
				}
				case 1074:
					break;
				case 279:
				{
					currTokenType = TOKEN_EPAS;
					return;
				}
				case 1075:
					break;
				case 310:
				{
					currTokenType = TOKEN_DBG;
					return;
				}
				case 1076:
					break;
				case 377:
				{
					currTokenType = TOKEN_POSY;
					return;
				}
				case 1077:
					break;
				case 116:
				{
					currTokenType = TOKEN_ABSV;
					return;
				}
				case 1078:
					break;
				case 363:
				{
					currTokenType = TOKEN_PNXT;
					return;
				}
				case 1079:
					break;
				case 216:
				{
					currTokenType = TOKEN_SDMP;
					return;
				}
				case 1080:
					break;
				case 111:
				{
					currTokenType = TOKEN_ATAN;
					return;
				}
				case 1081:
					break;
				case 90:
				{
					currTokenType = TOKEN_TWIN;
					return;
				}
				case 1082:
					break;
				case 260:
				{
					currTokenType = TOKEN_GOTO;
					return;
				}
				case 1083:
					break;
				case 338:
				{
					currTokenType = TOKEN_CABL;
					return;
				}
				case 1084:
					break;
				case 69:
				{
					currTokenType = TOKEN_RPAS;
					return;
				}
				case 1085:
					break;
				case 10:
				{
					currTokenType = TOKEN_GT;
					return;
				}
				case 1086:
					break;
				case 232:
				{
					currTokenType = TOKEN_UCLN;
					return;
				}
				case 1087:
					break;
				case 324:
				{
					currTokenType = TOKEN_DFTX;
					return;
				}
				case 1088:
					break;
				case 182:
				{
					currTokenType = TOKEN_MIRA;
					return;
				}
				case 1089:
					break;
				case 354:
				{
					currTokenType = TOKEN_CMRA;
					return;
				}
				case 1090:
					break;
				case 493:
				{
					currTokenType = TOKEN_ORDR_SIGN;
					return;
				}
				case 1091:
					break;
				case 117:
				{
					currTokenType = TOKEN_ABBA;
					return;
				}
				case 1092:
					break;
				case 344:
				{
					currTokenType = TOKEN_CALC;
					return;
				}
				case 1093:
					break;
				case 249:
				{
					currTokenType = TOKEN_GNAM;
					return;
				}
				case 1094:
					break;
				case 522:
				{
					currTokenType = TOKEN_GENE_KILL;
					return;
				}
				case 1095:
					break;
				case 386:
				{
					currTokenType = TOKEN_PCLS;
					return;
				}
				case 1096:
					break;
				case 222:
				{
					currTokenType = TOKEN_SPAS;
					return;
				}
				case 1097:
					break;
				case 414:
				{
					currTokenType = TOKEN_FLTY;
					return;
				}
				case 1098:
					break;
				case 72:
				{
					currTokenType = TOKEN_TRCK;
					return;
				}
				case 1099:
					break;
				case 103:
				{
					currTokenType = TOKEN_VELY;
					return;
				}
				case 1100:
					break;
				case 262:
				{
					currTokenType = TOKEN_GPAS;
					return;
				}
				case 1101:
					break;
				case 445:
				{
					currTokenType = TOKEN_WDTH;
					return;
				}
				case 1102:
					break;
				case 485:
				{
					currTokenType = TOKEN_NET_WHOF;
					return;
				}
				case 1103:
					break;
				case 490:
				{
					currTokenType = TOKEN_NEW_CREA;
					return;
				}
				case 1104:
					break;
				case 46:
				{
					currTokenType = TOKEN_RTIM;
					return;
				}
				case 1105:
					break;
				case 549:
				{
					currTokenType = TOKEN_PRT_FROM;
					return;
				}
				case 1106:
					break;
				case 416:
				{
					currTokenType = TOKEN_FCUS;
					return;
				}
				case 1107:
					break;
				case 277:
				{
					currTokenType = TOKEN_ELIF;
					return;
				}
				case 1108:
					break;
				case 456:
				{
					currTokenType = SUBROUTINE_GSUB;
					return;
				}
				case 1109:
					break;
				case 475:
				{
					currTokenType = TOKEN_NET_LINE;
					return;
				}
				case 1110:
					break;
				case 352:
				{
					currTokenType = TOKEN_CODF;
					return;
				}
				case 1111:
					break;
				case 220:
				{
					currTokenType = TOKEN_SCOL;
					return;
				}
				case 1112:
					break;
				case 504:
				{
					currTokenType = TOKEN_SWAY_SHOU;
					return;
				}
				case 1113:
					break;
				case 213:
				{
					currTokenType = TOKEN_SEZZ;
					return;
				}
				case 1114:
					break;
				case 592:
				{
					currTokenType = TOKEN_HIST_VARI;
					return;
				}
				case 1115:
					break;
				case 474:
				{
					currTokenType = TOKEN_NET_EXPO;
					return;
				}
				case 1116:
					break;
				case 580:
				{
					currTokenType = TOKEN_FILE_OFLU;
					return;
				}
				case 1117:
					break;
				case 510:
				{
					currTokenType = TOKEN_BRN_SETN;
					return;
				}
				case 1118:
					break;
				case 84:
				{
					currTokenType = TOKEN_TMVF;
					return;
				}
				case 1119:
					break;
				case 448:
				{
					currTokenType = TOKEN_WILD;
					return;
				}
				case 1120:
					break;
				case 533:
				{
					currTokenType = TOKEN_DBG_PROF;
					return;
				}
				case 1121:
					break;
				case 529:
				{
					currTokenType = TOKEN_DBG_ASRT;
					return;
				}
				case 1122:
					break;
				case 270:
				{
					currTokenType = TOKEN_EAMN;
					return;
				}
				case 1123:
					break;
				case 65:
				{
					currTokenType = TOKEN_REPS;
					return;
				}
				case 1124:
					break;
				case 107:
				{
					currTokenType = TOKEN_ANDV;
					return;
				}
				case 1125:
					break;
				case 64:
				{
					currTokenType = TOKEN_RELY;
					return;
				}
				case 1126:
					break;
				case 60:
				{
					currTokenType = TOKEN_REAQ;
					return;
				}
				case 1127:
					break;
				case 312:
				{
					currTokenType = TOKEN_DELN;
					return;
				}
				case 1128:
					break;
				case 421:
				{
					currTokenType = TOKEN_HGHT;
					return;
				}
				case 1129:
					break;
				case 168:
				{
					currTokenType = TOKEN_MODV;
					return;
				}
				case 1130:
					break;
				case 427:
				{
					currTokenType = TOKEN_WNTI;
					return;
				}
				case 1131:
					break;
				case 477:
				{
					currTokenType = TOKEN_NET_FROM;
					return;
				}
				case 1132:
					break;
				case 367:
				{
					currTokenType = TOKEN_PAUS;
					return;
				}
				case 1133:
					break;
				case 560:
				{
					currTokenType = TOKEN_PRAY_GARB;
					return;
				}
				case 1134:
					break;
				case 67:
				{
					currTokenType = TOKEN_RLOC;
					return;
				}
				case 1135:
					break;
				case 593:
				{
					currTokenType = TOKEN_HIST_MON1;
					return;
				}
				case 1136:
					break;
				case 428:
				{
					currTokenType = TOKEN_WNAM;
					return;
				}
				case 1137:
					break;
				case 404:
				{
					currTokenType = TOKEN_FTOI;
					return;
				}
				case 1138:
					break;
				case 480:
				{
					currTokenType = TOKEN_NET_HEAD;
					return;
				}
				case 1139:
					break;
				case 496:
				{
					currTokenType = TOKEN_MESG_WRT;
					return;
				}
				case 1140:
					break;
				case 544:
				{
					currTokenType = TOKEN_PRT_SEND;
					return;
				}
				case 1141:
					break;
				case 8:
				{
					currTokenType = TOKEN_EQ;
					return;
				}
				case 1142:
					break;
				case 501:
				{
					currTokenType = TOKEN_STIM_WRIT;
					return;
				}
				case 1143:
					break;
				case 336:
				{
					currTokenType = TOKEN_CABV;
					return;
				}
				case 1144:
					break;
				case 234:
				{
					currTokenType = TOKEN_UFTX;
					return;
				}
				case 1145:
					break;
				case 256:
				{
					currTokenType = TOKEN_GAMN;
					return;
				}
				case 1146:
					break;
				case 41:
				{
					currTokenType = TOKEN_NCLS;
					return;
				}
				case 1147:
					break;
				case 194:
				{
					currTokenType = TOKEN_STOI;
					return;
				}
				case 1148:
					break;
				case 365:
				{
					currTokenType = TOKEN_PTXT;
					return;
				}
				case 1149:
					break;
				case 259:
				{
					currTokenType = TOKEN_GAIT;
					return;
				}
				case 1150:
					break;
				case 99:
				{
					currTokenType = TOKEN_VMNR;
					return;
				}
				case 1151:
					break;
				case 227:
				{
					currTokenType = TOKEN_SHOW;
					return;
				}
				case 1152:
					break;
				case 498:
				{
					currTokenType = TOKEN_STIM_TACT;
					return;
				}
				case 1153:
					break;
				case 446:
				{
					currTokenType = TOKEN_WDOW;
					return;
				}
				case 1154:
					break;
				case 328:
				{
					currTokenType = TOKEN_CATA;
					return;
				}
				case 1155:
					break;
				case 62:
				{
					currTokenType = TOKEN_REAF;
					return;
				}
				case 1156:
					break;
				case 5:
				{
					stringLiteral.setLength(0);
					yybegin(STRING);
				}
				case 1157:
					break;
				case 572:
				{
					currTokenType = TOKEN_PAT_BUTT;
					return;
				}
				case 1158:
					break;
				case 468:
				{
					currTokenType = TOKEN_NET_MAKE;
					return;
				}
				case 1159:
					break;
				case 359:
				{
					currTokenType = TOKEN_CLIK;
					return;
				}
				case 1160:
					break;
				case 381:
				{
					currTokenType = TOKEN_PUHL;
					return;
				}
				case 1161:
					break;
				case 212:
				{
					currTokenType = TOKEN_SEEE;
					return;
				}
				case 1162:
					break;
				case 569:
				{
					currTokenType = TOKEN_PRAY_KILL;
					return;
				}
				case 1163:
					break;
				case 31:
				{
					currTokenType = TOKEN_NAMN;
					return;
				}
				case 1164:
					break;
				case 444:
				{
					currTokenType = TOKEN_WEBB;
					return;
				}
				case 1165:
					break;
				case 150:
				{
					currTokenType = NUMVAR_MV;
					return;
				}
				case 1166:
					break;
				case 114:
				{
					currTokenType = TOKEN_ASLP;
					return;
				}
				case 1167:
					break;
				case 599:
				{
					currTokenType = TOKEN_HIST_GEND;
					return;
				}
				case 1168:
					break;
				case 425:
				{
					currTokenType = TOKEN_HIRP;
					return;
				}
				case 1169:
					break;
				case 292:
				{
					currTokenType = TOKEN_LINK;
					return;
				}
				case 1170:
					break;
				case 176:
				{
					currTokenType = TOKEN_MULV;
					return;
				}
				case 1171:
					break;
				case 175:
				{
					currTokenType = TOKEN_MUTE;
					return;
				}
				case 1172:
					break;
				case 555:
				{
					currTokenType = TOKEN_PRAY_TEST;
					return;
				}
				case 1173:
					break;
				case 460:
				{
					currTokenType = TOKEN_CD_PAWS;
					return;
				}
				case 1174:
					break;
				case 154:
				{
					currTokenType = TOKEN_MVFT;
					return;
				}
				case 1175:
					break;
				case 376:
				{
					currTokenType = TOKEN_POSX;
					return;
				}
				case 1176:
					break;
				case 26:
				{
					currTokenType = TOKEN_AND;
					return;
				}
				case 1177:
					break;
				case 526:
				{
					currTokenType = TOKEN_GIDS_FMLY;
					return;
				}
				case 1178:
					break;
				case 9:
				{
					currTokenType = TOKEN_LT;
					return;
				}
				case 1179:
					break;
				case 591:
				{
					currTokenType = TOKEN_HIST_TYPE;
					return;
				}
				case 1180:
					break;
				case 422:
				{
					currTokenType = TOKEN_HEAP;
					return;
				}
				case 1181:
					break;
				case 366:
				{
					currTokenType = TOKEN_PART;
					return;
				}
				case 1182:
					break;
				case 100:
				{
					currTokenType = TOKEN_VMJR;
					return;
				}
				case 1183:
					break;
				case 553:
				{
					currTokenType = TOKEN_PRAY_NEXT;
					return;
				}
				case 1184:
					break;
				case 387:
				{
					currTokenType = TOKEN_INNL;
					return;
				}
				case 1185:
					break;
				case 160:
				{
					currTokenType = TOKEN_MAPW;
					return;
				}
				case 1186:
					break;
				case 601:
				{
					currTokenType = TOKEN_HIST_DATE;
					return;
				}
				case 1187:
					break;
				case 88:
				{
					currTokenType = TOKEN_TIME;
					return;
				}
				case 1188:
					break;
				case 393:
				{
					currTokenType = TOKEN_INJR;
					return;
				}
				case 1189:
					break;
				case 342:
				{
					currTokenType = TOKEN_CALG;
					return;
				}
				case 1190:
					break;
				case 57:
				{
					currTokenType = TOKEN_RGHT;
					return;
				}
				case 1191:
					break;
				case 579:
				{
					currTokenType = TOKEN_FILE_OCLO;
					return;
				}
				case 1192:
					break;
				case 351:
				{
					currTokenType = TOKEN_CODP;
					return;
				}
				case 1193:
					break;
				case 584:
				{
					currTokenType = TOKEN_FILE_JDEL;
					return;
				}
				case 1194:
					break;
				case 583:
				{
					currTokenType = TOKEN_FILE_ICLO;
					return;
				}
				case 1195:
					break;
				case 519:
				{
					currTokenType = TOKEN_GENE_LOAD;
					return;
				}
				case 1196:
					break;
				case 93:
				{
					currTokenType = NUMVAR_VA;
					return;
				}
				case 1197:
					break;
				case 371:
				{
					currTokenType = TOKEN_POSR;
					return;
				}
				case 1198:
					break;
				case 401:
				{
					currTokenType = TOKEN_FRSH;
					return;
				}
				case 1199:
					break;
				case 413:
				{
					currTokenType = TOKEN_FLTX;
					return;
				}
				case 1200:
					break;
				case 345:
				{
					currTokenType = TOKEN_CACL;
					return;
				}
				case 1201:
					break;
				case 514:
				{
					currTokenType = TOKEN_BRN_DMPT;
					return;
				}
				case 1202:
					break;
				case 102:
				{
					currTokenType = TOKEN_VELX;
					return;
				}
				case 1203:
					break;
				case 505:
				{
					currTokenType = TOKEN_SWAY_WRIT;
					return;
				}
				case 1204:
					break;
				case 131:
				{
					currTokenType = TOKEN_ACCG;
					return;
				}
				case 1205:
					break;
				case 120:
				{
					currTokenType = TOKEN_AERO;
					return;
				}
				case 1206:
					break;
				case 535:
				{
					currTokenType = TOKEN_DBG_POLL;
					return;
				}
				case 1207:
					break;
				case 127:
				{
					currTokenType = TOKEN_ADDS;
					return;
				}
				case 1208:
					break;
				case 487:
				{
					currTokenType = TOKEN_NEW_VHCL;
					return;
				}
				case 1209:
					break;
				case 48:
				{
					currTokenType = TOKEN_RTYP;
					return;
				}
				case 1210:
					break;
				case 440:
				{
					currTokenType = TOKEN_WAIT;
					return;
				}
				case 1211:
					break;
				case 240:
				{
					currTokenType = TOKEN_BASE;
					return;
				}
				case 1212:
					break;
				case 536:
				{
					currTokenType = TOKEN_DBG_PLAY;
					return;
				}
				case 1213:
					break;
				case 603:
				{
					currTokenType = TOKEN_HIST_CAGE;
					return;
				}
				case 1214:
					break;
				case 297:
				{
					currTokenType = TOKEN_DREA;
					return;
				}
				case 1215:
					break;
				case 402:
				{
					currTokenType = TOKEN_FREL;
					return;
				}
				case 1216:
					break;
				case 417:
				{
					currTokenType = TOKEN_HAND;
					return;
				}
				case 1217:
					break;
				case 323:
				{
					currTokenType = TOKEN_DISQ;
					return;
				}
				case 1218:
					break;
				case 350:
				{
					currTokenType = TOKEN_CODE;
					return;
				}
				case 1219:
					break;
				case 551:
				{
					currTokenType = TOKEN_PRT_KRAK;
					return;
				}
				case 1220:
					break;
				case 406:
				{
					currTokenType = TOKEN_FVWM;
					return;
				}
				case 1221:
					break;
				case 202:
				{
					currTokenType = TOKEN_SORQ;
					return;
				}
				case 1222:
					break;
				case 384:
				{
					currTokenType = TOKEN_PLMU;
					return;
				}
				case 1223:
					break;
				case 407:
				{
					currTokenType = TOKEN_FALL;
					return;
				}
				case 1224:
					break;
				case 302:
				{
					currTokenType = TOKEN_DOOR;
					return;
				}
				case 1225:
					break;
				case 68:
				{
					currTokenType = TOKEN_RCLR;
					return;
				}
				case 1226:
					break;
				case 305:
				{
					currTokenType = TOKEN_DOIF;
					return;
				}
				case 1227:
					break;
				case 2:
				{
				}
				case 1228:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
					{
						zzAtEOF = true;
						{
							eof = true;
							return;
						}
					}
					else
					{
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}
}
